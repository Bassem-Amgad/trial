
SPI_RPI.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001a26  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000010  00800060  00001a26  00001aba  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000009  00800070  00800070  00001aca  2**0
                  ALLOC
  3 .stab         000013a4  00000000  00000000  00001acc  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000a43  00000000  00000000  00002e70  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  000038b3  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  000039f3  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  00003b63  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  000057ac  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  00006697  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  00007444  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  000075a4  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  00007831  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  00007fff  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 1b 0c 	jmp	0x1836	; 0x1836 <__vector_12>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e6 e2       	ldi	r30, 0x26	; 38
      68:	fa e1       	ldi	r31, 0x1A	; 26
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a0 37       	cpi	r26, 0x70	; 112
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	10 e0       	ldi	r17, 0x00	; 0
      78:	a0 e7       	ldi	r26, 0x70	; 112
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a9 37       	cpi	r26, 0x79	; 121
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 65 0c 	call	0x18ca	; 0x18ca <main>
      8a:	0c 94 11 0d 	jmp	0x1a22	; 0x1a22 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 da 0c 	jmp	0x19b4	; 0x19b4 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a0 e6       	ldi	r26, 0x60	; 96
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 f6 0c 	jmp	0x19ec	; 0x19ec <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 e6 0c 	jmp	0x19cc	; 0x19cc <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 02 0d 	jmp	0x1a04	; 0x1a04 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 e6 0c 	jmp	0x19cc	; 0x19cc <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 02 0d 	jmp	0x1a04	; 0x1a04 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 da 0c 	jmp	0x19b4	; 0x19b4 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	80 e6       	ldi	r24, 0x60	; 96
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 f6 0c 	jmp	0x19ec	; 0x19ec <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 e6 0c 	jmp	0x19cc	; 0x19cc <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 02 0d 	jmp	0x1a04	; 0x1a04 <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 e6 0c 	jmp	0x19cc	; 0x19cc <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 02 0d 	jmp	0x1a04	; 0x1a04 <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 e6 0c 	jmp	0x19cc	; 0x19cc <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 02 0d 	jmp	0x1a04	; 0x1a04 <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 ea 0c 	jmp	0x19d4	; 0x19d4 <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 06 0d 	jmp	0x1a0c	; 0x1a0c <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__stack+0x113>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__stack+0x10d>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__stack+0x117>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__stack+0xaf>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__stack+0x11>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__stack+0x65>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__stack+0x21>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__stack+0x19>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__stack+0x37>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__stack+0x2f>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__stack+0x59>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__stack+0x89>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__stack+0x91>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__stack+0x91>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__stack+0xa9>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__stack+0xfd>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__stack+0x10d>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__stack+0xdf>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__stack+0xef>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__stack+0xe7>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__stack+0xfd>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__stack+0xff>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__stack+0x117>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <DIO_voidSetDirection>:
#include "DIO.h"


//=========================================================================================
extern void DIO_voidSetDirection(u8 Copy_u8PinNum, u8 Copy_u8PinValue )
{
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	00 d0       	rcall	.+0      	; 0xb4c <DIO_voidSetDirection+0x6>
     b4c:	cd b7       	in	r28, 0x3d	; 61
     b4e:	de b7       	in	r29, 0x3e	; 62
     b50:	89 83       	std	Y+1, r24	; 0x01
     b52:	6a 83       	std	Y+2, r22	; 0x02
	 * And it takes two input parameters :
	 * 			the first argument is the pin number which the user want to set its direction
	 *			the Second argument is the value (1 || 0) to set it to the selected pin
	 *	its return type is void that means it has no return value
	 */
	if( (Copy_u8PinNum>=0 && Copy_u8PinNum<=31) &&  (Copy_u8PinValue==0 || Copy_u8PinValue==1) )
     b54:	89 81       	ldd	r24, Y+1	; 0x01
     b56:	80 32       	cpi	r24, 0x20	; 32
     b58:	08 f0       	brcs	.+2      	; 0xb5c <DIO_voidSetDirection+0x16>
     b5a:	ca c0       	rjmp	.+404    	; 0xcf0 <DIO_voidSetDirection+0x1aa>
     b5c:	8a 81       	ldd	r24, Y+2	; 0x02
     b5e:	88 23       	and	r24, r24
     b60:	21 f0       	breq	.+8      	; 0xb6a <DIO_voidSetDirection+0x24>
     b62:	8a 81       	ldd	r24, Y+2	; 0x02
     b64:	81 30       	cpi	r24, 0x01	; 1
     b66:	09 f0       	breq	.+2      	; 0xb6a <DIO_voidSetDirection+0x24>
     b68:	c3 c0       	rjmp	.+390    	; 0xcf0 <DIO_voidSetDirection+0x1aa>
	{
		//here is a switch case to specify which pin was passed to the function and assign the value to it
		if(Copy_u8PinNum/8==0)
     b6a:	89 81       	ldd	r24, Y+1	; 0x01
     b6c:	88 30       	cpi	r24, 0x08	; 8
     b6e:	68 f5       	brcc	.+90     	; 0xbca <DIO_voidSetDirection+0x84>
		{
			assign_bit(DDRA,Copy_u8PinNum%8,Copy_u8PinValue);
     b70:	aa e3       	ldi	r26, 0x3A	; 58
     b72:	b0 e0       	ldi	r27, 0x00	; 0
     b74:	ea e3       	ldi	r30, 0x3A	; 58
     b76:	f0 e0       	ldi	r31, 0x00	; 0
     b78:	80 81       	ld	r24, Z
     b7a:	48 2f       	mov	r20, r24
     b7c:	89 81       	ldd	r24, Y+1	; 0x01
     b7e:	88 2f       	mov	r24, r24
     b80:	90 e0       	ldi	r25, 0x00	; 0
     b82:	9c 01       	movw	r18, r24
     b84:	27 70       	andi	r18, 0x07	; 7
     b86:	30 70       	andi	r19, 0x00	; 0
     b88:	81 e0       	ldi	r24, 0x01	; 1
     b8a:	90 e0       	ldi	r25, 0x00	; 0
     b8c:	02 c0       	rjmp	.+4      	; 0xb92 <DIO_voidSetDirection+0x4c>
     b8e:	88 0f       	add	r24, r24
     b90:	99 1f       	adc	r25, r25
     b92:	2a 95       	dec	r18
     b94:	e2 f7       	brpl	.-8      	; 0xb8e <DIO_voidSetDirection+0x48>
     b96:	80 95       	com	r24
     b98:	84 23       	and	r24, r20
     b9a:	8c 93       	st	X, r24
     b9c:	aa e3       	ldi	r26, 0x3A	; 58
     b9e:	b0 e0       	ldi	r27, 0x00	; 0
     ba0:	ea e3       	ldi	r30, 0x3A	; 58
     ba2:	f0 e0       	ldi	r31, 0x00	; 0
     ba4:	80 81       	ld	r24, Z
     ba6:	48 2f       	mov	r20, r24
     ba8:	8a 81       	ldd	r24, Y+2	; 0x02
     baa:	28 2f       	mov	r18, r24
     bac:	30 e0       	ldi	r19, 0x00	; 0
     bae:	89 81       	ldd	r24, Y+1	; 0x01
     bb0:	88 2f       	mov	r24, r24
     bb2:	90 e0       	ldi	r25, 0x00	; 0
     bb4:	87 70       	andi	r24, 0x07	; 7
     bb6:	90 70       	andi	r25, 0x00	; 0
     bb8:	b9 01       	movw	r22, r18
     bba:	02 c0       	rjmp	.+4      	; 0xbc0 <DIO_voidSetDirection+0x7a>
     bbc:	66 0f       	add	r22, r22
     bbe:	77 1f       	adc	r23, r23
     bc0:	8a 95       	dec	r24
     bc2:	e2 f7       	brpl	.-8      	; 0xbbc <DIO_voidSetDirection+0x76>
     bc4:	cb 01       	movw	r24, r22
     bc6:	84 2b       	or	r24, r20
     bc8:	8c 93       	st	X, r24
		}
		if(Copy_u8PinNum/8==1)
     bca:	89 81       	ldd	r24, Y+1	; 0x01
     bcc:	88 50       	subi	r24, 0x08	; 8
     bce:	88 30       	cpi	r24, 0x08	; 8
     bd0:	68 f5       	brcc	.+90     	; 0xc2c <DIO_voidSetDirection+0xe6>
		{
			assign_bit(DDRB,Copy_u8PinNum%8,Copy_u8PinValue);
     bd2:	a7 e3       	ldi	r26, 0x37	; 55
     bd4:	b0 e0       	ldi	r27, 0x00	; 0
     bd6:	e7 e3       	ldi	r30, 0x37	; 55
     bd8:	f0 e0       	ldi	r31, 0x00	; 0
     bda:	80 81       	ld	r24, Z
     bdc:	48 2f       	mov	r20, r24
     bde:	89 81       	ldd	r24, Y+1	; 0x01
     be0:	88 2f       	mov	r24, r24
     be2:	90 e0       	ldi	r25, 0x00	; 0
     be4:	9c 01       	movw	r18, r24
     be6:	27 70       	andi	r18, 0x07	; 7
     be8:	30 70       	andi	r19, 0x00	; 0
     bea:	81 e0       	ldi	r24, 0x01	; 1
     bec:	90 e0       	ldi	r25, 0x00	; 0
     bee:	02 c0       	rjmp	.+4      	; 0xbf4 <DIO_voidSetDirection+0xae>
     bf0:	88 0f       	add	r24, r24
     bf2:	99 1f       	adc	r25, r25
     bf4:	2a 95       	dec	r18
     bf6:	e2 f7       	brpl	.-8      	; 0xbf0 <DIO_voidSetDirection+0xaa>
     bf8:	80 95       	com	r24
     bfa:	84 23       	and	r24, r20
     bfc:	8c 93       	st	X, r24
     bfe:	a7 e3       	ldi	r26, 0x37	; 55
     c00:	b0 e0       	ldi	r27, 0x00	; 0
     c02:	e7 e3       	ldi	r30, 0x37	; 55
     c04:	f0 e0       	ldi	r31, 0x00	; 0
     c06:	80 81       	ld	r24, Z
     c08:	48 2f       	mov	r20, r24
     c0a:	8a 81       	ldd	r24, Y+2	; 0x02
     c0c:	28 2f       	mov	r18, r24
     c0e:	30 e0       	ldi	r19, 0x00	; 0
     c10:	89 81       	ldd	r24, Y+1	; 0x01
     c12:	88 2f       	mov	r24, r24
     c14:	90 e0       	ldi	r25, 0x00	; 0
     c16:	87 70       	andi	r24, 0x07	; 7
     c18:	90 70       	andi	r25, 0x00	; 0
     c1a:	b9 01       	movw	r22, r18
     c1c:	02 c0       	rjmp	.+4      	; 0xc22 <DIO_voidSetDirection+0xdc>
     c1e:	66 0f       	add	r22, r22
     c20:	77 1f       	adc	r23, r23
     c22:	8a 95       	dec	r24
     c24:	e2 f7       	brpl	.-8      	; 0xc1e <DIO_voidSetDirection+0xd8>
     c26:	cb 01       	movw	r24, r22
     c28:	84 2b       	or	r24, r20
     c2a:	8c 93       	st	X, r24
		}
		if(Copy_u8PinNum/8==2)
     c2c:	89 81       	ldd	r24, Y+1	; 0x01
     c2e:	80 51       	subi	r24, 0x10	; 16
     c30:	88 30       	cpi	r24, 0x08	; 8
     c32:	68 f5       	brcc	.+90     	; 0xc8e <DIO_voidSetDirection+0x148>
		{
			assign_bit(DDRC,Copy_u8PinNum%8,Copy_u8PinValue);
     c34:	a4 e3       	ldi	r26, 0x34	; 52
     c36:	b0 e0       	ldi	r27, 0x00	; 0
     c38:	e4 e3       	ldi	r30, 0x34	; 52
     c3a:	f0 e0       	ldi	r31, 0x00	; 0
     c3c:	80 81       	ld	r24, Z
     c3e:	48 2f       	mov	r20, r24
     c40:	89 81       	ldd	r24, Y+1	; 0x01
     c42:	88 2f       	mov	r24, r24
     c44:	90 e0       	ldi	r25, 0x00	; 0
     c46:	9c 01       	movw	r18, r24
     c48:	27 70       	andi	r18, 0x07	; 7
     c4a:	30 70       	andi	r19, 0x00	; 0
     c4c:	81 e0       	ldi	r24, 0x01	; 1
     c4e:	90 e0       	ldi	r25, 0x00	; 0
     c50:	02 c0       	rjmp	.+4      	; 0xc56 <DIO_voidSetDirection+0x110>
     c52:	88 0f       	add	r24, r24
     c54:	99 1f       	adc	r25, r25
     c56:	2a 95       	dec	r18
     c58:	e2 f7       	brpl	.-8      	; 0xc52 <DIO_voidSetDirection+0x10c>
     c5a:	80 95       	com	r24
     c5c:	84 23       	and	r24, r20
     c5e:	8c 93       	st	X, r24
     c60:	a4 e3       	ldi	r26, 0x34	; 52
     c62:	b0 e0       	ldi	r27, 0x00	; 0
     c64:	e4 e3       	ldi	r30, 0x34	; 52
     c66:	f0 e0       	ldi	r31, 0x00	; 0
     c68:	80 81       	ld	r24, Z
     c6a:	48 2f       	mov	r20, r24
     c6c:	8a 81       	ldd	r24, Y+2	; 0x02
     c6e:	28 2f       	mov	r18, r24
     c70:	30 e0       	ldi	r19, 0x00	; 0
     c72:	89 81       	ldd	r24, Y+1	; 0x01
     c74:	88 2f       	mov	r24, r24
     c76:	90 e0       	ldi	r25, 0x00	; 0
     c78:	87 70       	andi	r24, 0x07	; 7
     c7a:	90 70       	andi	r25, 0x00	; 0
     c7c:	b9 01       	movw	r22, r18
     c7e:	02 c0       	rjmp	.+4      	; 0xc84 <DIO_voidSetDirection+0x13e>
     c80:	66 0f       	add	r22, r22
     c82:	77 1f       	adc	r23, r23
     c84:	8a 95       	dec	r24
     c86:	e2 f7       	brpl	.-8      	; 0xc80 <DIO_voidSetDirection+0x13a>
     c88:	cb 01       	movw	r24, r22
     c8a:	84 2b       	or	r24, r20
     c8c:	8c 93       	st	X, r24
		}
		if(Copy_u8PinNum/8==3)
     c8e:	89 81       	ldd	r24, Y+1	; 0x01
     c90:	88 51       	subi	r24, 0x18	; 24
     c92:	88 30       	cpi	r24, 0x08	; 8
     c94:	68 f5       	brcc	.+90     	; 0xcf0 <DIO_voidSetDirection+0x1aa>
		{
			assign_bit(DDRD,Copy_u8PinNum%8,Copy_u8PinValue);
     c96:	a1 e3       	ldi	r26, 0x31	; 49
     c98:	b0 e0       	ldi	r27, 0x00	; 0
     c9a:	e1 e3       	ldi	r30, 0x31	; 49
     c9c:	f0 e0       	ldi	r31, 0x00	; 0
     c9e:	80 81       	ld	r24, Z
     ca0:	48 2f       	mov	r20, r24
     ca2:	89 81       	ldd	r24, Y+1	; 0x01
     ca4:	88 2f       	mov	r24, r24
     ca6:	90 e0       	ldi	r25, 0x00	; 0
     ca8:	9c 01       	movw	r18, r24
     caa:	27 70       	andi	r18, 0x07	; 7
     cac:	30 70       	andi	r19, 0x00	; 0
     cae:	81 e0       	ldi	r24, 0x01	; 1
     cb0:	90 e0       	ldi	r25, 0x00	; 0
     cb2:	02 c0       	rjmp	.+4      	; 0xcb8 <DIO_voidSetDirection+0x172>
     cb4:	88 0f       	add	r24, r24
     cb6:	99 1f       	adc	r25, r25
     cb8:	2a 95       	dec	r18
     cba:	e2 f7       	brpl	.-8      	; 0xcb4 <DIO_voidSetDirection+0x16e>
     cbc:	80 95       	com	r24
     cbe:	84 23       	and	r24, r20
     cc0:	8c 93       	st	X, r24
     cc2:	a1 e3       	ldi	r26, 0x31	; 49
     cc4:	b0 e0       	ldi	r27, 0x00	; 0
     cc6:	e1 e3       	ldi	r30, 0x31	; 49
     cc8:	f0 e0       	ldi	r31, 0x00	; 0
     cca:	80 81       	ld	r24, Z
     ccc:	48 2f       	mov	r20, r24
     cce:	8a 81       	ldd	r24, Y+2	; 0x02
     cd0:	28 2f       	mov	r18, r24
     cd2:	30 e0       	ldi	r19, 0x00	; 0
     cd4:	89 81       	ldd	r24, Y+1	; 0x01
     cd6:	88 2f       	mov	r24, r24
     cd8:	90 e0       	ldi	r25, 0x00	; 0
     cda:	87 70       	andi	r24, 0x07	; 7
     cdc:	90 70       	andi	r25, 0x00	; 0
     cde:	b9 01       	movw	r22, r18
     ce0:	02 c0       	rjmp	.+4      	; 0xce6 <DIO_voidSetDirection+0x1a0>
     ce2:	66 0f       	add	r22, r22
     ce4:	77 1f       	adc	r23, r23
     ce6:	8a 95       	dec	r24
     ce8:	e2 f7       	brpl	.-8      	; 0xce2 <DIO_voidSetDirection+0x19c>
     cea:	cb 01       	movw	r24, r22
     cec:	84 2b       	or	r24, r20
     cee:	8c 93       	st	X, r24
		}
	}
}
     cf0:	0f 90       	pop	r0
     cf2:	0f 90       	pop	r0
     cf4:	cf 91       	pop	r28
     cf6:	df 91       	pop	r29
     cf8:	08 95       	ret

00000cfa <DIO_voidWritePIN>:
//=========================================================================================
extern void DIO_voidWritePIN(u8 Copy_u8PinNum, u8 Copy_u8PinValue)
{
     cfa:	df 93       	push	r29
     cfc:	cf 93       	push	r28
     cfe:	00 d0       	rcall	.+0      	; 0xd00 <DIO_voidWritePIN+0x6>
     d00:	cd b7       	in	r28, 0x3d	; 61
     d02:	de b7       	in	r29, 0x3e	; 62
     d04:	89 83       	std	Y+1, r24	; 0x01
     d06:	6a 83       	std	Y+2, r22	; 0x02
	*the 1st one is the number of the PIN
	*the 2nd one is the value that needed to be assigned to the pre-specified PIN
	*	its return type is void that means it has no return value
	*/

	if( (Copy_u8PinNum>=0 && Copy_u8PinNum<=31) &&  (Copy_u8PinValue==0 || Copy_u8PinValue==1) )
     d08:	89 81       	ldd	r24, Y+1	; 0x01
     d0a:	80 32       	cpi	r24, 0x20	; 32
     d0c:	08 f0       	brcs	.+2      	; 0xd10 <DIO_voidWritePIN+0x16>
     d0e:	ca c0       	rjmp	.+404    	; 0xea4 <DIO_voidWritePIN+0x1aa>
     d10:	8a 81       	ldd	r24, Y+2	; 0x02
     d12:	88 23       	and	r24, r24
     d14:	21 f0       	breq	.+8      	; 0xd1e <DIO_voidWritePIN+0x24>
     d16:	8a 81       	ldd	r24, Y+2	; 0x02
     d18:	81 30       	cpi	r24, 0x01	; 1
     d1a:	09 f0       	breq	.+2      	; 0xd1e <DIO_voidWritePIN+0x24>
     d1c:	c3 c0       	rjmp	.+390    	; 0xea4 <DIO_voidWritePIN+0x1aa>
	{
		//the switch case to specify which pin was selected by the user
		if((Copy_u8PinNum/8)==0)
     d1e:	89 81       	ldd	r24, Y+1	; 0x01
     d20:	88 30       	cpi	r24, 0x08	; 8
     d22:	68 f5       	brcc	.+90     	; 0xd7e <DIO_voidWritePIN+0x84>
		{
			assign_bit(PORTA,Copy_u8PinNum%8,Copy_u8PinValue);
     d24:	ab e3       	ldi	r26, 0x3B	; 59
     d26:	b0 e0       	ldi	r27, 0x00	; 0
     d28:	eb e3       	ldi	r30, 0x3B	; 59
     d2a:	f0 e0       	ldi	r31, 0x00	; 0
     d2c:	80 81       	ld	r24, Z
     d2e:	48 2f       	mov	r20, r24
     d30:	89 81       	ldd	r24, Y+1	; 0x01
     d32:	88 2f       	mov	r24, r24
     d34:	90 e0       	ldi	r25, 0x00	; 0
     d36:	9c 01       	movw	r18, r24
     d38:	27 70       	andi	r18, 0x07	; 7
     d3a:	30 70       	andi	r19, 0x00	; 0
     d3c:	81 e0       	ldi	r24, 0x01	; 1
     d3e:	90 e0       	ldi	r25, 0x00	; 0
     d40:	02 c0       	rjmp	.+4      	; 0xd46 <DIO_voidWritePIN+0x4c>
     d42:	88 0f       	add	r24, r24
     d44:	99 1f       	adc	r25, r25
     d46:	2a 95       	dec	r18
     d48:	e2 f7       	brpl	.-8      	; 0xd42 <DIO_voidWritePIN+0x48>
     d4a:	80 95       	com	r24
     d4c:	84 23       	and	r24, r20
     d4e:	8c 93       	st	X, r24
     d50:	ab e3       	ldi	r26, 0x3B	; 59
     d52:	b0 e0       	ldi	r27, 0x00	; 0
     d54:	eb e3       	ldi	r30, 0x3B	; 59
     d56:	f0 e0       	ldi	r31, 0x00	; 0
     d58:	80 81       	ld	r24, Z
     d5a:	48 2f       	mov	r20, r24
     d5c:	8a 81       	ldd	r24, Y+2	; 0x02
     d5e:	28 2f       	mov	r18, r24
     d60:	30 e0       	ldi	r19, 0x00	; 0
     d62:	89 81       	ldd	r24, Y+1	; 0x01
     d64:	88 2f       	mov	r24, r24
     d66:	90 e0       	ldi	r25, 0x00	; 0
     d68:	87 70       	andi	r24, 0x07	; 7
     d6a:	90 70       	andi	r25, 0x00	; 0
     d6c:	b9 01       	movw	r22, r18
     d6e:	02 c0       	rjmp	.+4      	; 0xd74 <DIO_voidWritePIN+0x7a>
     d70:	66 0f       	add	r22, r22
     d72:	77 1f       	adc	r23, r23
     d74:	8a 95       	dec	r24
     d76:	e2 f7       	brpl	.-8      	; 0xd70 <DIO_voidWritePIN+0x76>
     d78:	cb 01       	movw	r24, r22
     d7a:	84 2b       	or	r24, r20
     d7c:	8c 93       	st	X, r24
		}
		if((Copy_u8PinNum/8)==1)
     d7e:	89 81       	ldd	r24, Y+1	; 0x01
     d80:	88 50       	subi	r24, 0x08	; 8
     d82:	88 30       	cpi	r24, 0x08	; 8
     d84:	68 f5       	brcc	.+90     	; 0xde0 <DIO_voidWritePIN+0xe6>
		{
			assign_bit(PORTB,Copy_u8PinNum%8,Copy_u8PinValue);
     d86:	a8 e3       	ldi	r26, 0x38	; 56
     d88:	b0 e0       	ldi	r27, 0x00	; 0
     d8a:	e8 e3       	ldi	r30, 0x38	; 56
     d8c:	f0 e0       	ldi	r31, 0x00	; 0
     d8e:	80 81       	ld	r24, Z
     d90:	48 2f       	mov	r20, r24
     d92:	89 81       	ldd	r24, Y+1	; 0x01
     d94:	88 2f       	mov	r24, r24
     d96:	90 e0       	ldi	r25, 0x00	; 0
     d98:	9c 01       	movw	r18, r24
     d9a:	27 70       	andi	r18, 0x07	; 7
     d9c:	30 70       	andi	r19, 0x00	; 0
     d9e:	81 e0       	ldi	r24, 0x01	; 1
     da0:	90 e0       	ldi	r25, 0x00	; 0
     da2:	02 c0       	rjmp	.+4      	; 0xda8 <DIO_voidWritePIN+0xae>
     da4:	88 0f       	add	r24, r24
     da6:	99 1f       	adc	r25, r25
     da8:	2a 95       	dec	r18
     daa:	e2 f7       	brpl	.-8      	; 0xda4 <DIO_voidWritePIN+0xaa>
     dac:	80 95       	com	r24
     dae:	84 23       	and	r24, r20
     db0:	8c 93       	st	X, r24
     db2:	a8 e3       	ldi	r26, 0x38	; 56
     db4:	b0 e0       	ldi	r27, 0x00	; 0
     db6:	e8 e3       	ldi	r30, 0x38	; 56
     db8:	f0 e0       	ldi	r31, 0x00	; 0
     dba:	80 81       	ld	r24, Z
     dbc:	48 2f       	mov	r20, r24
     dbe:	8a 81       	ldd	r24, Y+2	; 0x02
     dc0:	28 2f       	mov	r18, r24
     dc2:	30 e0       	ldi	r19, 0x00	; 0
     dc4:	89 81       	ldd	r24, Y+1	; 0x01
     dc6:	88 2f       	mov	r24, r24
     dc8:	90 e0       	ldi	r25, 0x00	; 0
     dca:	87 70       	andi	r24, 0x07	; 7
     dcc:	90 70       	andi	r25, 0x00	; 0
     dce:	b9 01       	movw	r22, r18
     dd0:	02 c0       	rjmp	.+4      	; 0xdd6 <DIO_voidWritePIN+0xdc>
     dd2:	66 0f       	add	r22, r22
     dd4:	77 1f       	adc	r23, r23
     dd6:	8a 95       	dec	r24
     dd8:	e2 f7       	brpl	.-8      	; 0xdd2 <DIO_voidWritePIN+0xd8>
     dda:	cb 01       	movw	r24, r22
     ddc:	84 2b       	or	r24, r20
     dde:	8c 93       	st	X, r24
		}
		if((Copy_u8PinNum)/8==2)
     de0:	89 81       	ldd	r24, Y+1	; 0x01
     de2:	80 51       	subi	r24, 0x10	; 16
     de4:	88 30       	cpi	r24, 0x08	; 8
     de6:	68 f5       	brcc	.+90     	; 0xe42 <DIO_voidWritePIN+0x148>
		{
			assign_bit(PORTC,Copy_u8PinNum%8,Copy_u8PinValue);
     de8:	a5 e3       	ldi	r26, 0x35	; 53
     dea:	b0 e0       	ldi	r27, 0x00	; 0
     dec:	e5 e3       	ldi	r30, 0x35	; 53
     dee:	f0 e0       	ldi	r31, 0x00	; 0
     df0:	80 81       	ld	r24, Z
     df2:	48 2f       	mov	r20, r24
     df4:	89 81       	ldd	r24, Y+1	; 0x01
     df6:	88 2f       	mov	r24, r24
     df8:	90 e0       	ldi	r25, 0x00	; 0
     dfa:	9c 01       	movw	r18, r24
     dfc:	27 70       	andi	r18, 0x07	; 7
     dfe:	30 70       	andi	r19, 0x00	; 0
     e00:	81 e0       	ldi	r24, 0x01	; 1
     e02:	90 e0       	ldi	r25, 0x00	; 0
     e04:	02 c0       	rjmp	.+4      	; 0xe0a <DIO_voidWritePIN+0x110>
     e06:	88 0f       	add	r24, r24
     e08:	99 1f       	adc	r25, r25
     e0a:	2a 95       	dec	r18
     e0c:	e2 f7       	brpl	.-8      	; 0xe06 <DIO_voidWritePIN+0x10c>
     e0e:	80 95       	com	r24
     e10:	84 23       	and	r24, r20
     e12:	8c 93       	st	X, r24
     e14:	a5 e3       	ldi	r26, 0x35	; 53
     e16:	b0 e0       	ldi	r27, 0x00	; 0
     e18:	e5 e3       	ldi	r30, 0x35	; 53
     e1a:	f0 e0       	ldi	r31, 0x00	; 0
     e1c:	80 81       	ld	r24, Z
     e1e:	48 2f       	mov	r20, r24
     e20:	8a 81       	ldd	r24, Y+2	; 0x02
     e22:	28 2f       	mov	r18, r24
     e24:	30 e0       	ldi	r19, 0x00	; 0
     e26:	89 81       	ldd	r24, Y+1	; 0x01
     e28:	88 2f       	mov	r24, r24
     e2a:	90 e0       	ldi	r25, 0x00	; 0
     e2c:	87 70       	andi	r24, 0x07	; 7
     e2e:	90 70       	andi	r25, 0x00	; 0
     e30:	b9 01       	movw	r22, r18
     e32:	02 c0       	rjmp	.+4      	; 0xe38 <DIO_voidWritePIN+0x13e>
     e34:	66 0f       	add	r22, r22
     e36:	77 1f       	adc	r23, r23
     e38:	8a 95       	dec	r24
     e3a:	e2 f7       	brpl	.-8      	; 0xe34 <DIO_voidWritePIN+0x13a>
     e3c:	cb 01       	movw	r24, r22
     e3e:	84 2b       	or	r24, r20
     e40:	8c 93       	st	X, r24
		}
		if((Copy_u8PinNum/8)==3)
     e42:	89 81       	ldd	r24, Y+1	; 0x01
     e44:	88 51       	subi	r24, 0x18	; 24
     e46:	88 30       	cpi	r24, 0x08	; 8
     e48:	68 f5       	brcc	.+90     	; 0xea4 <DIO_voidWritePIN+0x1aa>
		{
			assign_bit(PORTD,Copy_u8PinNum%8,Copy_u8PinValue);
     e4a:	a2 e3       	ldi	r26, 0x32	; 50
     e4c:	b0 e0       	ldi	r27, 0x00	; 0
     e4e:	e2 e3       	ldi	r30, 0x32	; 50
     e50:	f0 e0       	ldi	r31, 0x00	; 0
     e52:	80 81       	ld	r24, Z
     e54:	48 2f       	mov	r20, r24
     e56:	89 81       	ldd	r24, Y+1	; 0x01
     e58:	88 2f       	mov	r24, r24
     e5a:	90 e0       	ldi	r25, 0x00	; 0
     e5c:	9c 01       	movw	r18, r24
     e5e:	27 70       	andi	r18, 0x07	; 7
     e60:	30 70       	andi	r19, 0x00	; 0
     e62:	81 e0       	ldi	r24, 0x01	; 1
     e64:	90 e0       	ldi	r25, 0x00	; 0
     e66:	02 c0       	rjmp	.+4      	; 0xe6c <DIO_voidWritePIN+0x172>
     e68:	88 0f       	add	r24, r24
     e6a:	99 1f       	adc	r25, r25
     e6c:	2a 95       	dec	r18
     e6e:	e2 f7       	brpl	.-8      	; 0xe68 <DIO_voidWritePIN+0x16e>
     e70:	80 95       	com	r24
     e72:	84 23       	and	r24, r20
     e74:	8c 93       	st	X, r24
     e76:	a2 e3       	ldi	r26, 0x32	; 50
     e78:	b0 e0       	ldi	r27, 0x00	; 0
     e7a:	e2 e3       	ldi	r30, 0x32	; 50
     e7c:	f0 e0       	ldi	r31, 0x00	; 0
     e7e:	80 81       	ld	r24, Z
     e80:	48 2f       	mov	r20, r24
     e82:	8a 81       	ldd	r24, Y+2	; 0x02
     e84:	28 2f       	mov	r18, r24
     e86:	30 e0       	ldi	r19, 0x00	; 0
     e88:	89 81       	ldd	r24, Y+1	; 0x01
     e8a:	88 2f       	mov	r24, r24
     e8c:	90 e0       	ldi	r25, 0x00	; 0
     e8e:	87 70       	andi	r24, 0x07	; 7
     e90:	90 70       	andi	r25, 0x00	; 0
     e92:	b9 01       	movw	r22, r18
     e94:	02 c0       	rjmp	.+4      	; 0xe9a <DIO_voidWritePIN+0x1a0>
     e96:	66 0f       	add	r22, r22
     e98:	77 1f       	adc	r23, r23
     e9a:	8a 95       	dec	r24
     e9c:	e2 f7       	brpl	.-8      	; 0xe96 <DIO_voidWritePIN+0x19c>
     e9e:	cb 01       	movw	r24, r22
     ea0:	84 2b       	or	r24, r20
     ea2:	8c 93       	st	X, r24
		}
	}

}
     ea4:	0f 90       	pop	r0
     ea6:	0f 90       	pop	r0
     ea8:	cf 91       	pop	r28
     eaa:	df 91       	pop	r29
     eac:	08 95       	ret

00000eae <DIO_u8ReadPIN>:
//=======================================================================================
extern u8 DIO_u8ReadPIN(u8 Copy_u8PinNum)
{
     eae:	df 93       	push	r29
     eb0:	cf 93       	push	r28
     eb2:	00 d0       	rcall	.+0      	; 0xeb4 <DIO_u8ReadPIN+0x6>
     eb4:	cd b7       	in	r28, 0x3d	; 61
     eb6:	de b7       	in	r29, 0x3e	; 62
     eb8:	8a 83       	std	Y+2, r24	; 0x02
		*	its return type is u8 that means it has a return value with data type (u8)
		*/

	//a u8 variable to store the read value and return it
	u8 Local_u8ReturnValue;
	if( Copy_u8PinNum>=0 && Copy_u8PinNum<=31)
     eba:	8a 81       	ldd	r24, Y+2	; 0x02
     ebc:	80 32       	cpi	r24, 0x20	; 32
     ebe:	08 f0       	brcs	.+2      	; 0xec2 <DIO_u8ReadPIN+0x14>
     ec0:	97 c0       	rjmp	.+302    	; 0xff0 <DIO_u8ReadPIN+0x142>
		{
			if(Copy_u8PinNum/8==0)
     ec2:	8a 81       	ldd	r24, Y+2	; 0x02
     ec4:	88 30       	cpi	r24, 0x08	; 8
     ec6:	10 f5       	brcc	.+68     	; 0xf0c <DIO_u8ReadPIN+0x5e>
			{
				Local_u8ReturnValue=get_bit(PINA,Copy_u8PinNum%8);
     ec8:	e9 e3       	ldi	r30, 0x39	; 57
     eca:	f0 e0       	ldi	r31, 0x00	; 0
     ecc:	80 81       	ld	r24, Z
     ece:	48 2f       	mov	r20, r24
     ed0:	50 e0       	ldi	r21, 0x00	; 0
     ed2:	8a 81       	ldd	r24, Y+2	; 0x02
     ed4:	88 2f       	mov	r24, r24
     ed6:	90 e0       	ldi	r25, 0x00	; 0
     ed8:	9c 01       	movw	r18, r24
     eda:	27 70       	andi	r18, 0x07	; 7
     edc:	30 70       	andi	r19, 0x00	; 0
     ede:	81 e0       	ldi	r24, 0x01	; 1
     ee0:	90 e0       	ldi	r25, 0x00	; 0
     ee2:	02 c0       	rjmp	.+4      	; 0xee8 <DIO_u8ReadPIN+0x3a>
     ee4:	88 0f       	add	r24, r24
     ee6:	99 1f       	adc	r25, r25
     ee8:	2a 95       	dec	r18
     eea:	e2 f7       	brpl	.-8      	; 0xee4 <DIO_u8ReadPIN+0x36>
     eec:	9a 01       	movw	r18, r20
     eee:	28 23       	and	r18, r24
     ef0:	39 23       	and	r19, r25
     ef2:	8a 81       	ldd	r24, Y+2	; 0x02
     ef4:	88 2f       	mov	r24, r24
     ef6:	90 e0       	ldi	r25, 0x00	; 0
     ef8:	87 70       	andi	r24, 0x07	; 7
     efa:	90 70       	andi	r25, 0x00	; 0
     efc:	a9 01       	movw	r20, r18
     efe:	02 c0       	rjmp	.+4      	; 0xf04 <DIO_u8ReadPIN+0x56>
     f00:	55 95       	asr	r21
     f02:	47 95       	ror	r20
     f04:	8a 95       	dec	r24
     f06:	e2 f7       	brpl	.-8      	; 0xf00 <DIO_u8ReadPIN+0x52>
     f08:	ca 01       	movw	r24, r20
     f0a:	89 83       	std	Y+1, r24	; 0x01
			}
			if(Copy_u8PinNum/8==1)
     f0c:	8a 81       	ldd	r24, Y+2	; 0x02
     f0e:	88 50       	subi	r24, 0x08	; 8
     f10:	88 30       	cpi	r24, 0x08	; 8
     f12:	10 f5       	brcc	.+68     	; 0xf58 <DIO_u8ReadPIN+0xaa>
			{
				Local_u8ReturnValue=get_bit(PINB,Copy_u8PinNum%8);
     f14:	e6 e3       	ldi	r30, 0x36	; 54
     f16:	f0 e0       	ldi	r31, 0x00	; 0
     f18:	80 81       	ld	r24, Z
     f1a:	48 2f       	mov	r20, r24
     f1c:	50 e0       	ldi	r21, 0x00	; 0
     f1e:	8a 81       	ldd	r24, Y+2	; 0x02
     f20:	88 2f       	mov	r24, r24
     f22:	90 e0       	ldi	r25, 0x00	; 0
     f24:	9c 01       	movw	r18, r24
     f26:	27 70       	andi	r18, 0x07	; 7
     f28:	30 70       	andi	r19, 0x00	; 0
     f2a:	81 e0       	ldi	r24, 0x01	; 1
     f2c:	90 e0       	ldi	r25, 0x00	; 0
     f2e:	02 c0       	rjmp	.+4      	; 0xf34 <DIO_u8ReadPIN+0x86>
     f30:	88 0f       	add	r24, r24
     f32:	99 1f       	adc	r25, r25
     f34:	2a 95       	dec	r18
     f36:	e2 f7       	brpl	.-8      	; 0xf30 <DIO_u8ReadPIN+0x82>
     f38:	9a 01       	movw	r18, r20
     f3a:	28 23       	and	r18, r24
     f3c:	39 23       	and	r19, r25
     f3e:	8a 81       	ldd	r24, Y+2	; 0x02
     f40:	88 2f       	mov	r24, r24
     f42:	90 e0       	ldi	r25, 0x00	; 0
     f44:	87 70       	andi	r24, 0x07	; 7
     f46:	90 70       	andi	r25, 0x00	; 0
     f48:	a9 01       	movw	r20, r18
     f4a:	02 c0       	rjmp	.+4      	; 0xf50 <DIO_u8ReadPIN+0xa2>
     f4c:	55 95       	asr	r21
     f4e:	47 95       	ror	r20
     f50:	8a 95       	dec	r24
     f52:	e2 f7       	brpl	.-8      	; 0xf4c <DIO_u8ReadPIN+0x9e>
     f54:	ca 01       	movw	r24, r20
     f56:	89 83       	std	Y+1, r24	; 0x01
			}
			if(Copy_u8PinNum/8==2)
     f58:	8a 81       	ldd	r24, Y+2	; 0x02
     f5a:	80 51       	subi	r24, 0x10	; 16
     f5c:	88 30       	cpi	r24, 0x08	; 8
     f5e:	10 f5       	brcc	.+68     	; 0xfa4 <DIO_u8ReadPIN+0xf6>
			{
				Local_u8ReturnValue=get_bit(PINC,Copy_u8PinNum%8);
     f60:	e3 e3       	ldi	r30, 0x33	; 51
     f62:	f0 e0       	ldi	r31, 0x00	; 0
     f64:	80 81       	ld	r24, Z
     f66:	48 2f       	mov	r20, r24
     f68:	50 e0       	ldi	r21, 0x00	; 0
     f6a:	8a 81       	ldd	r24, Y+2	; 0x02
     f6c:	88 2f       	mov	r24, r24
     f6e:	90 e0       	ldi	r25, 0x00	; 0
     f70:	9c 01       	movw	r18, r24
     f72:	27 70       	andi	r18, 0x07	; 7
     f74:	30 70       	andi	r19, 0x00	; 0
     f76:	81 e0       	ldi	r24, 0x01	; 1
     f78:	90 e0       	ldi	r25, 0x00	; 0
     f7a:	02 c0       	rjmp	.+4      	; 0xf80 <DIO_u8ReadPIN+0xd2>
     f7c:	88 0f       	add	r24, r24
     f7e:	99 1f       	adc	r25, r25
     f80:	2a 95       	dec	r18
     f82:	e2 f7       	brpl	.-8      	; 0xf7c <DIO_u8ReadPIN+0xce>
     f84:	9a 01       	movw	r18, r20
     f86:	28 23       	and	r18, r24
     f88:	39 23       	and	r19, r25
     f8a:	8a 81       	ldd	r24, Y+2	; 0x02
     f8c:	88 2f       	mov	r24, r24
     f8e:	90 e0       	ldi	r25, 0x00	; 0
     f90:	87 70       	andi	r24, 0x07	; 7
     f92:	90 70       	andi	r25, 0x00	; 0
     f94:	a9 01       	movw	r20, r18
     f96:	02 c0       	rjmp	.+4      	; 0xf9c <DIO_u8ReadPIN+0xee>
     f98:	55 95       	asr	r21
     f9a:	47 95       	ror	r20
     f9c:	8a 95       	dec	r24
     f9e:	e2 f7       	brpl	.-8      	; 0xf98 <DIO_u8ReadPIN+0xea>
     fa0:	ca 01       	movw	r24, r20
     fa2:	89 83       	std	Y+1, r24	; 0x01
			}
			if(Copy_u8PinNum/8==3)
     fa4:	8a 81       	ldd	r24, Y+2	; 0x02
     fa6:	88 51       	subi	r24, 0x18	; 24
     fa8:	88 30       	cpi	r24, 0x08	; 8
     faa:	10 f5       	brcc	.+68     	; 0xff0 <DIO_u8ReadPIN+0x142>
			{
				Local_u8ReturnValue=get_bit(PIND,Copy_u8PinNum%8);
     fac:	e0 e3       	ldi	r30, 0x30	; 48
     fae:	f0 e0       	ldi	r31, 0x00	; 0
     fb0:	80 81       	ld	r24, Z
     fb2:	48 2f       	mov	r20, r24
     fb4:	50 e0       	ldi	r21, 0x00	; 0
     fb6:	8a 81       	ldd	r24, Y+2	; 0x02
     fb8:	88 2f       	mov	r24, r24
     fba:	90 e0       	ldi	r25, 0x00	; 0
     fbc:	9c 01       	movw	r18, r24
     fbe:	27 70       	andi	r18, 0x07	; 7
     fc0:	30 70       	andi	r19, 0x00	; 0
     fc2:	81 e0       	ldi	r24, 0x01	; 1
     fc4:	90 e0       	ldi	r25, 0x00	; 0
     fc6:	02 c0       	rjmp	.+4      	; 0xfcc <DIO_u8ReadPIN+0x11e>
     fc8:	88 0f       	add	r24, r24
     fca:	99 1f       	adc	r25, r25
     fcc:	2a 95       	dec	r18
     fce:	e2 f7       	brpl	.-8      	; 0xfc8 <DIO_u8ReadPIN+0x11a>
     fd0:	9a 01       	movw	r18, r20
     fd2:	28 23       	and	r18, r24
     fd4:	39 23       	and	r19, r25
     fd6:	8a 81       	ldd	r24, Y+2	; 0x02
     fd8:	88 2f       	mov	r24, r24
     fda:	90 e0       	ldi	r25, 0x00	; 0
     fdc:	87 70       	andi	r24, 0x07	; 7
     fde:	90 70       	andi	r25, 0x00	; 0
     fe0:	a9 01       	movw	r20, r18
     fe2:	02 c0       	rjmp	.+4      	; 0xfe8 <DIO_u8ReadPIN+0x13a>
     fe4:	55 95       	asr	r21
     fe6:	47 95       	ror	r20
     fe8:	8a 95       	dec	r24
     fea:	e2 f7       	brpl	.-8      	; 0xfe4 <DIO_u8ReadPIN+0x136>
     fec:	ca 01       	movw	r24, r20
     fee:	89 83       	std	Y+1, r24	; 0x01
			}
		}

	//return the output of the selected pin
	return Local_u8ReturnValue;
     ff0:	89 81       	ldd	r24, Y+1	; 0x01
}
     ff2:	0f 90       	pop	r0
     ff4:	0f 90       	pop	r0
     ff6:	cf 91       	pop	r28
     ff8:	df 91       	pop	r29
     ffa:	08 95       	ret

00000ffc <LCD_voidInit>:
#include "utilss.h"
#include "DIO.h"
#include "LCD.h"

extern void LCD_voidInit (void)
{
     ffc:	df 93       	push	r29
     ffe:	cf 93       	push	r28
    1000:	cd b7       	in	r28, 0x3d	; 61
    1002:	de b7       	in	r29, 0x3e	; 62
    1004:	e8 97       	sbiw	r28, 0x38	; 56
    1006:	0f b6       	in	r0, 0x3f	; 63
    1008:	f8 94       	cli
    100a:	de bf       	out	0x3e, r29	; 62
    100c:	0f be       	out	0x3f, r0	; 63
    100e:	cd bf       	out	0x3d, r28	; 61
	// define 3 Control Pins
	DIO_voidSetDirection (DIO_u8PinB0,DIO_u8PinOp);//E
    1010:	88 e0       	ldi	r24, 0x08	; 8
    1012:	61 e0       	ldi	r22, 0x01	; 1
    1014:	0e 94 a3 05 	call	0xb46	; 0xb46 <DIO_voidSetDirection>
	DIO_voidSetDirection (DIO_u8PinB1,DIO_u8PinOp);//RS
    1018:	89 e0       	ldi	r24, 0x09	; 9
    101a:	61 e0       	ldi	r22, 0x01	; 1
    101c:	0e 94 a3 05 	call	0xb46	; 0xb46 <DIO_voidSetDirection>
	DIO_voidSetDirection (DIO_u8PinB2,DIO_u8PinOp);//RW
    1020:	8a e0       	ldi	r24, 0x0A	; 10
    1022:	61 e0       	ldi	r22, 0x01	; 1
    1024:	0e 94 a3 05 	call	0xb46	; 0xb46 <DIO_voidSetDirection>

	// define 8 data Pins
	DIO_voidSetDirection (DIO_u8PinC0,DIO_u8PinOp);//D0
    1028:	80 e1       	ldi	r24, 0x10	; 16
    102a:	61 e0       	ldi	r22, 0x01	; 1
    102c:	0e 94 a3 05 	call	0xb46	; 0xb46 <DIO_voidSetDirection>
	DIO_voidSetDirection (DIO_u8PinC1,DIO_u8PinOp);//D1
    1030:	81 e1       	ldi	r24, 0x11	; 17
    1032:	61 e0       	ldi	r22, 0x01	; 1
    1034:	0e 94 a3 05 	call	0xb46	; 0xb46 <DIO_voidSetDirection>
	DIO_voidSetDirection (DIO_u8PinC2,DIO_u8PinOp);//D2
    1038:	82 e1       	ldi	r24, 0x12	; 18
    103a:	61 e0       	ldi	r22, 0x01	; 1
    103c:	0e 94 a3 05 	call	0xb46	; 0xb46 <DIO_voidSetDirection>
	DIO_voidSetDirection (DIO_u8PinC3,DIO_u8PinOp);//D3
    1040:	83 e1       	ldi	r24, 0x13	; 19
    1042:	61 e0       	ldi	r22, 0x01	; 1
    1044:	0e 94 a3 05 	call	0xb46	; 0xb46 <DIO_voidSetDirection>
	DIO_voidSetDirection (DIO_u8PinC4,DIO_u8PinOp);//D4
    1048:	84 e1       	ldi	r24, 0x14	; 20
    104a:	61 e0       	ldi	r22, 0x01	; 1
    104c:	0e 94 a3 05 	call	0xb46	; 0xb46 <DIO_voidSetDirection>
	DIO_voidSetDirection (DIO_u8PinC5,DIO_u8PinOp);//D5
    1050:	85 e1       	ldi	r24, 0x15	; 21
    1052:	61 e0       	ldi	r22, 0x01	; 1
    1054:	0e 94 a3 05 	call	0xb46	; 0xb46 <DIO_voidSetDirection>
	DIO_voidSetDirection (DIO_u8PinC6,DIO_u8PinOp);//D6
    1058:	86 e1       	ldi	r24, 0x16	; 22
    105a:	61 e0       	ldi	r22, 0x01	; 1
    105c:	0e 94 a3 05 	call	0xb46	; 0xb46 <DIO_voidSetDirection>
	DIO_voidSetDirection (DIO_u8PinC7,DIO_u8PinOp);//D7
    1060:	87 e1       	ldi	r24, 0x17	; 23
    1062:	61 e0       	ldi	r22, 0x01	; 1
    1064:	0e 94 a3 05 	call	0xb46	; 0xb46 <DIO_voidSetDirection>
    1068:	80 e0       	ldi	r24, 0x00	; 0
    106a:	90 e0       	ldi	r25, 0x00	; 0
    106c:	a0 ef       	ldi	r26, 0xF0	; 240
    106e:	b1 e4       	ldi	r27, 0x41	; 65
    1070:	8d ab       	std	Y+53, r24	; 0x35
    1072:	9e ab       	std	Y+54, r25	; 0x36
    1074:	af ab       	std	Y+55, r26	; 0x37
    1076:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1078:	6d a9       	ldd	r22, Y+53	; 0x35
    107a:	7e a9       	ldd	r23, Y+54	; 0x36
    107c:	8f a9       	ldd	r24, Y+55	; 0x37
    107e:	98 ad       	ldd	r25, Y+56	; 0x38
    1080:	20 e0       	ldi	r18, 0x00	; 0
    1082:	30 e0       	ldi	r19, 0x00	; 0
    1084:	4a ef       	ldi	r20, 0xFA	; 250
    1086:	54 e4       	ldi	r21, 0x44	; 68
    1088:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    108c:	dc 01       	movw	r26, r24
    108e:	cb 01       	movw	r24, r22
    1090:	89 ab       	std	Y+49, r24	; 0x31
    1092:	9a ab       	std	Y+50, r25	; 0x32
    1094:	ab ab       	std	Y+51, r26	; 0x33
    1096:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1098:	69 a9       	ldd	r22, Y+49	; 0x31
    109a:	7a a9       	ldd	r23, Y+50	; 0x32
    109c:	8b a9       	ldd	r24, Y+51	; 0x33
    109e:	9c a9       	ldd	r25, Y+52	; 0x34
    10a0:	20 e0       	ldi	r18, 0x00	; 0
    10a2:	30 e0       	ldi	r19, 0x00	; 0
    10a4:	40 e8       	ldi	r20, 0x80	; 128
    10a6:	5f e3       	ldi	r21, 0x3F	; 63
    10a8:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    10ac:	88 23       	and	r24, r24
    10ae:	2c f4       	brge	.+10     	; 0x10ba <LCD_voidInit+0xbe>
		__ticks = 1;
    10b0:	81 e0       	ldi	r24, 0x01	; 1
    10b2:	90 e0       	ldi	r25, 0x00	; 0
    10b4:	98 ab       	std	Y+48, r25	; 0x30
    10b6:	8f a7       	std	Y+47, r24	; 0x2f
    10b8:	3f c0       	rjmp	.+126    	; 0x1138 <LCD_voidInit+0x13c>
	else if (__tmp > 65535)
    10ba:	69 a9       	ldd	r22, Y+49	; 0x31
    10bc:	7a a9       	ldd	r23, Y+50	; 0x32
    10be:	8b a9       	ldd	r24, Y+51	; 0x33
    10c0:	9c a9       	ldd	r25, Y+52	; 0x34
    10c2:	20 e0       	ldi	r18, 0x00	; 0
    10c4:	3f ef       	ldi	r19, 0xFF	; 255
    10c6:	4f e7       	ldi	r20, 0x7F	; 127
    10c8:	57 e4       	ldi	r21, 0x47	; 71
    10ca:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    10ce:	18 16       	cp	r1, r24
    10d0:	4c f5       	brge	.+82     	; 0x1124 <LCD_voidInit+0x128>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    10d2:	6d a9       	ldd	r22, Y+53	; 0x35
    10d4:	7e a9       	ldd	r23, Y+54	; 0x36
    10d6:	8f a9       	ldd	r24, Y+55	; 0x37
    10d8:	98 ad       	ldd	r25, Y+56	; 0x38
    10da:	20 e0       	ldi	r18, 0x00	; 0
    10dc:	30 e0       	ldi	r19, 0x00	; 0
    10de:	40 e2       	ldi	r20, 0x20	; 32
    10e0:	51 e4       	ldi	r21, 0x41	; 65
    10e2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    10e6:	dc 01       	movw	r26, r24
    10e8:	cb 01       	movw	r24, r22
    10ea:	bc 01       	movw	r22, r24
    10ec:	cd 01       	movw	r24, r26
    10ee:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    10f2:	dc 01       	movw	r26, r24
    10f4:	cb 01       	movw	r24, r22
    10f6:	98 ab       	std	Y+48, r25	; 0x30
    10f8:	8f a7       	std	Y+47, r24	; 0x2f
    10fa:	0f c0       	rjmp	.+30     	; 0x111a <LCD_voidInit+0x11e>
    10fc:	88 ec       	ldi	r24, 0xC8	; 200
    10fe:	90 e0       	ldi	r25, 0x00	; 0
    1100:	9e a7       	std	Y+46, r25	; 0x2e
    1102:	8d a7       	std	Y+45, r24	; 0x2d
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1104:	8d a5       	ldd	r24, Y+45	; 0x2d
    1106:	9e a5       	ldd	r25, Y+46	; 0x2e
    1108:	01 97       	sbiw	r24, 0x01	; 1
    110a:	f1 f7       	brne	.-4      	; 0x1108 <LCD_voidInit+0x10c>
    110c:	9e a7       	std	Y+46, r25	; 0x2e
    110e:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1110:	8f a5       	ldd	r24, Y+47	; 0x2f
    1112:	98 a9       	ldd	r25, Y+48	; 0x30
    1114:	01 97       	sbiw	r24, 0x01	; 1
    1116:	98 ab       	std	Y+48, r25	; 0x30
    1118:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    111a:	8f a5       	ldd	r24, Y+47	; 0x2f
    111c:	98 a9       	ldd	r25, Y+48	; 0x30
    111e:	00 97       	sbiw	r24, 0x00	; 0
    1120:	69 f7       	brne	.-38     	; 0x10fc <LCD_voidInit+0x100>
    1122:	14 c0       	rjmp	.+40     	; 0x114c <LCD_voidInit+0x150>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1124:	69 a9       	ldd	r22, Y+49	; 0x31
    1126:	7a a9       	ldd	r23, Y+50	; 0x32
    1128:	8b a9       	ldd	r24, Y+51	; 0x33
    112a:	9c a9       	ldd	r25, Y+52	; 0x34
    112c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1130:	dc 01       	movw	r26, r24
    1132:	cb 01       	movw	r24, r22
    1134:	98 ab       	std	Y+48, r25	; 0x30
    1136:	8f a7       	std	Y+47, r24	; 0x2f
    1138:	8f a5       	ldd	r24, Y+47	; 0x2f
    113a:	98 a9       	ldd	r25, Y+48	; 0x30
    113c:	9c a7       	std	Y+44, r25	; 0x2c
    113e:	8b a7       	std	Y+43, r24	; 0x2b
    1140:	8b a5       	ldd	r24, Y+43	; 0x2b
    1142:	9c a5       	ldd	r25, Y+44	; 0x2c
    1144:	01 97       	sbiw	r24, 0x01	; 1
    1146:	f1 f7       	brne	.-4      	; 0x1144 <LCD_voidInit+0x148>
    1148:	9c a7       	std	Y+44, r25	; 0x2c
    114a:	8b a7       	std	Y+43, r24	; 0x2b

	_delay_ms(30);
	LCD_voidWriteCommand(0b00111000);// font=0,n=1
    114c:	88 e3       	ldi	r24, 0x38	; 56
    114e:	0e 94 0e 0a 	call	0x141c	; 0x141c <LCD_voidWriteCommand>
    1152:	80 e0       	ldi	r24, 0x00	; 0
    1154:	90 e0       	ldi	r25, 0x00	; 0
    1156:	a0 e2       	ldi	r26, 0x20	; 32
    1158:	b2 e4       	ldi	r27, 0x42	; 66
    115a:	8f a3       	std	Y+39, r24	; 0x27
    115c:	98 a7       	std	Y+40, r25	; 0x28
    115e:	a9 a7       	std	Y+41, r26	; 0x29
    1160:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1162:	6f a1       	ldd	r22, Y+39	; 0x27
    1164:	78 a5       	ldd	r23, Y+40	; 0x28
    1166:	89 a5       	ldd	r24, Y+41	; 0x29
    1168:	9a a5       	ldd	r25, Y+42	; 0x2a
    116a:	20 e0       	ldi	r18, 0x00	; 0
    116c:	30 e0       	ldi	r19, 0x00	; 0
    116e:	4a ef       	ldi	r20, 0xFA	; 250
    1170:	54 e4       	ldi	r21, 0x44	; 68
    1172:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1176:	dc 01       	movw	r26, r24
    1178:	cb 01       	movw	r24, r22
    117a:	8b a3       	std	Y+35, r24	; 0x23
    117c:	9c a3       	std	Y+36, r25	; 0x24
    117e:	ad a3       	std	Y+37, r26	; 0x25
    1180:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1182:	6b a1       	ldd	r22, Y+35	; 0x23
    1184:	7c a1       	ldd	r23, Y+36	; 0x24
    1186:	8d a1       	ldd	r24, Y+37	; 0x25
    1188:	9e a1       	ldd	r25, Y+38	; 0x26
    118a:	20 e0       	ldi	r18, 0x00	; 0
    118c:	30 e0       	ldi	r19, 0x00	; 0
    118e:	40 e8       	ldi	r20, 0x80	; 128
    1190:	5f e3       	ldi	r21, 0x3F	; 63
    1192:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1196:	88 23       	and	r24, r24
    1198:	2c f4       	brge	.+10     	; 0x11a4 <LCD_voidInit+0x1a8>
		__ticks = 1;
    119a:	81 e0       	ldi	r24, 0x01	; 1
    119c:	90 e0       	ldi	r25, 0x00	; 0
    119e:	9a a3       	std	Y+34, r25	; 0x22
    11a0:	89 a3       	std	Y+33, r24	; 0x21
    11a2:	3f c0       	rjmp	.+126    	; 0x1222 <LCD_voidInit+0x226>
	else if (__tmp > 65535)
    11a4:	6b a1       	ldd	r22, Y+35	; 0x23
    11a6:	7c a1       	ldd	r23, Y+36	; 0x24
    11a8:	8d a1       	ldd	r24, Y+37	; 0x25
    11aa:	9e a1       	ldd	r25, Y+38	; 0x26
    11ac:	20 e0       	ldi	r18, 0x00	; 0
    11ae:	3f ef       	ldi	r19, 0xFF	; 255
    11b0:	4f e7       	ldi	r20, 0x7F	; 127
    11b2:	57 e4       	ldi	r21, 0x47	; 71
    11b4:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    11b8:	18 16       	cp	r1, r24
    11ba:	4c f5       	brge	.+82     	; 0x120e <LCD_voidInit+0x212>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    11bc:	6f a1       	ldd	r22, Y+39	; 0x27
    11be:	78 a5       	ldd	r23, Y+40	; 0x28
    11c0:	89 a5       	ldd	r24, Y+41	; 0x29
    11c2:	9a a5       	ldd	r25, Y+42	; 0x2a
    11c4:	20 e0       	ldi	r18, 0x00	; 0
    11c6:	30 e0       	ldi	r19, 0x00	; 0
    11c8:	40 e2       	ldi	r20, 0x20	; 32
    11ca:	51 e4       	ldi	r21, 0x41	; 65
    11cc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    11d0:	dc 01       	movw	r26, r24
    11d2:	cb 01       	movw	r24, r22
    11d4:	bc 01       	movw	r22, r24
    11d6:	cd 01       	movw	r24, r26
    11d8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    11dc:	dc 01       	movw	r26, r24
    11de:	cb 01       	movw	r24, r22
    11e0:	9a a3       	std	Y+34, r25	; 0x22
    11e2:	89 a3       	std	Y+33, r24	; 0x21
    11e4:	0f c0       	rjmp	.+30     	; 0x1204 <LCD_voidInit+0x208>
    11e6:	88 ec       	ldi	r24, 0xC8	; 200
    11e8:	90 e0       	ldi	r25, 0x00	; 0
    11ea:	98 a3       	std	Y+32, r25	; 0x20
    11ec:	8f 8f       	std	Y+31, r24	; 0x1f
    11ee:	8f 8d       	ldd	r24, Y+31	; 0x1f
    11f0:	98 a1       	ldd	r25, Y+32	; 0x20
    11f2:	01 97       	sbiw	r24, 0x01	; 1
    11f4:	f1 f7       	brne	.-4      	; 0x11f2 <LCD_voidInit+0x1f6>
    11f6:	98 a3       	std	Y+32, r25	; 0x20
    11f8:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    11fa:	89 a1       	ldd	r24, Y+33	; 0x21
    11fc:	9a a1       	ldd	r25, Y+34	; 0x22
    11fe:	01 97       	sbiw	r24, 0x01	; 1
    1200:	9a a3       	std	Y+34, r25	; 0x22
    1202:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1204:	89 a1       	ldd	r24, Y+33	; 0x21
    1206:	9a a1       	ldd	r25, Y+34	; 0x22
    1208:	00 97       	sbiw	r24, 0x00	; 0
    120a:	69 f7       	brne	.-38     	; 0x11e6 <LCD_voidInit+0x1ea>
    120c:	14 c0       	rjmp	.+40     	; 0x1236 <LCD_voidInit+0x23a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    120e:	6b a1       	ldd	r22, Y+35	; 0x23
    1210:	7c a1       	ldd	r23, Y+36	; 0x24
    1212:	8d a1       	ldd	r24, Y+37	; 0x25
    1214:	9e a1       	ldd	r25, Y+38	; 0x26
    1216:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    121a:	dc 01       	movw	r26, r24
    121c:	cb 01       	movw	r24, r22
    121e:	9a a3       	std	Y+34, r25	; 0x22
    1220:	89 a3       	std	Y+33, r24	; 0x21
    1222:	89 a1       	ldd	r24, Y+33	; 0x21
    1224:	9a a1       	ldd	r25, Y+34	; 0x22
    1226:	9e 8f       	std	Y+30, r25	; 0x1e
    1228:	8d 8f       	std	Y+29, r24	; 0x1d
    122a:	8d 8d       	ldd	r24, Y+29	; 0x1d
    122c:	9e 8d       	ldd	r25, Y+30	; 0x1e
    122e:	01 97       	sbiw	r24, 0x01	; 1
    1230:	f1 f7       	brne	.-4      	; 0x122e <LCD_voidInit+0x232>
    1232:	9e 8f       	std	Y+30, r25	; 0x1e
    1234:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(40);
	LCD_voidWriteCommand(0b00001110);
    1236:	8e e0       	ldi	r24, 0x0E	; 14
    1238:	0e 94 0e 0a 	call	0x141c	; 0x141c <LCD_voidWriteCommand>
    123c:	80 e0       	ldi	r24, 0x00	; 0
    123e:	90 e0       	ldi	r25, 0x00	; 0
    1240:	a0 e2       	ldi	r26, 0x20	; 32
    1242:	b2 e4       	ldi	r27, 0x42	; 66
    1244:	89 8f       	std	Y+25, r24	; 0x19
    1246:	9a 8f       	std	Y+26, r25	; 0x1a
    1248:	ab 8f       	std	Y+27, r26	; 0x1b
    124a:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    124c:	69 8d       	ldd	r22, Y+25	; 0x19
    124e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1250:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1252:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1254:	20 e0       	ldi	r18, 0x00	; 0
    1256:	30 e0       	ldi	r19, 0x00	; 0
    1258:	4a ef       	ldi	r20, 0xFA	; 250
    125a:	54 e4       	ldi	r21, 0x44	; 68
    125c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1260:	dc 01       	movw	r26, r24
    1262:	cb 01       	movw	r24, r22
    1264:	8d 8b       	std	Y+21, r24	; 0x15
    1266:	9e 8b       	std	Y+22, r25	; 0x16
    1268:	af 8b       	std	Y+23, r26	; 0x17
    126a:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    126c:	6d 89       	ldd	r22, Y+21	; 0x15
    126e:	7e 89       	ldd	r23, Y+22	; 0x16
    1270:	8f 89       	ldd	r24, Y+23	; 0x17
    1272:	98 8d       	ldd	r25, Y+24	; 0x18
    1274:	20 e0       	ldi	r18, 0x00	; 0
    1276:	30 e0       	ldi	r19, 0x00	; 0
    1278:	40 e8       	ldi	r20, 0x80	; 128
    127a:	5f e3       	ldi	r21, 0x3F	; 63
    127c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1280:	88 23       	and	r24, r24
    1282:	2c f4       	brge	.+10     	; 0x128e <LCD_voidInit+0x292>
		__ticks = 1;
    1284:	81 e0       	ldi	r24, 0x01	; 1
    1286:	90 e0       	ldi	r25, 0x00	; 0
    1288:	9c 8b       	std	Y+20, r25	; 0x14
    128a:	8b 8b       	std	Y+19, r24	; 0x13
    128c:	3f c0       	rjmp	.+126    	; 0x130c <LCD_voidInit+0x310>
	else if (__tmp > 65535)
    128e:	6d 89       	ldd	r22, Y+21	; 0x15
    1290:	7e 89       	ldd	r23, Y+22	; 0x16
    1292:	8f 89       	ldd	r24, Y+23	; 0x17
    1294:	98 8d       	ldd	r25, Y+24	; 0x18
    1296:	20 e0       	ldi	r18, 0x00	; 0
    1298:	3f ef       	ldi	r19, 0xFF	; 255
    129a:	4f e7       	ldi	r20, 0x7F	; 127
    129c:	57 e4       	ldi	r21, 0x47	; 71
    129e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    12a2:	18 16       	cp	r1, r24
    12a4:	4c f5       	brge	.+82     	; 0x12f8 <LCD_voidInit+0x2fc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    12a6:	69 8d       	ldd	r22, Y+25	; 0x19
    12a8:	7a 8d       	ldd	r23, Y+26	; 0x1a
    12aa:	8b 8d       	ldd	r24, Y+27	; 0x1b
    12ac:	9c 8d       	ldd	r25, Y+28	; 0x1c
    12ae:	20 e0       	ldi	r18, 0x00	; 0
    12b0:	30 e0       	ldi	r19, 0x00	; 0
    12b2:	40 e2       	ldi	r20, 0x20	; 32
    12b4:	51 e4       	ldi	r21, 0x41	; 65
    12b6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    12ba:	dc 01       	movw	r26, r24
    12bc:	cb 01       	movw	r24, r22
    12be:	bc 01       	movw	r22, r24
    12c0:	cd 01       	movw	r24, r26
    12c2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    12c6:	dc 01       	movw	r26, r24
    12c8:	cb 01       	movw	r24, r22
    12ca:	9c 8b       	std	Y+20, r25	; 0x14
    12cc:	8b 8b       	std	Y+19, r24	; 0x13
    12ce:	0f c0       	rjmp	.+30     	; 0x12ee <LCD_voidInit+0x2f2>
    12d0:	88 ec       	ldi	r24, 0xC8	; 200
    12d2:	90 e0       	ldi	r25, 0x00	; 0
    12d4:	9a 8b       	std	Y+18, r25	; 0x12
    12d6:	89 8b       	std	Y+17, r24	; 0x11
    12d8:	89 89       	ldd	r24, Y+17	; 0x11
    12da:	9a 89       	ldd	r25, Y+18	; 0x12
    12dc:	01 97       	sbiw	r24, 0x01	; 1
    12de:	f1 f7       	brne	.-4      	; 0x12dc <LCD_voidInit+0x2e0>
    12e0:	9a 8b       	std	Y+18, r25	; 0x12
    12e2:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    12e4:	8b 89       	ldd	r24, Y+19	; 0x13
    12e6:	9c 89       	ldd	r25, Y+20	; 0x14
    12e8:	01 97       	sbiw	r24, 0x01	; 1
    12ea:	9c 8b       	std	Y+20, r25	; 0x14
    12ec:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    12ee:	8b 89       	ldd	r24, Y+19	; 0x13
    12f0:	9c 89       	ldd	r25, Y+20	; 0x14
    12f2:	00 97       	sbiw	r24, 0x00	; 0
    12f4:	69 f7       	brne	.-38     	; 0x12d0 <LCD_voidInit+0x2d4>
    12f6:	14 c0       	rjmp	.+40     	; 0x1320 <LCD_voidInit+0x324>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    12f8:	6d 89       	ldd	r22, Y+21	; 0x15
    12fa:	7e 89       	ldd	r23, Y+22	; 0x16
    12fc:	8f 89       	ldd	r24, Y+23	; 0x17
    12fe:	98 8d       	ldd	r25, Y+24	; 0x18
    1300:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1304:	dc 01       	movw	r26, r24
    1306:	cb 01       	movw	r24, r22
    1308:	9c 8b       	std	Y+20, r25	; 0x14
    130a:	8b 8b       	std	Y+19, r24	; 0x13
    130c:	8b 89       	ldd	r24, Y+19	; 0x13
    130e:	9c 89       	ldd	r25, Y+20	; 0x14
    1310:	98 8b       	std	Y+16, r25	; 0x10
    1312:	8f 87       	std	Y+15, r24	; 0x0f
    1314:	8f 85       	ldd	r24, Y+15	; 0x0f
    1316:	98 89       	ldd	r25, Y+16	; 0x10
    1318:	01 97       	sbiw	r24, 0x01	; 1
    131a:	f1 f7       	brne	.-4      	; 0x1318 <LCD_voidInit+0x31c>
    131c:	98 8b       	std	Y+16, r25	; 0x10
    131e:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(40);
	LCD_voidWriteCommand(0b00000001);
    1320:	81 e0       	ldi	r24, 0x01	; 1
    1322:	0e 94 0e 0a 	call	0x141c	; 0x141c <LCD_voidWriteCommand>
    1326:	80 e0       	ldi	r24, 0x00	; 0
    1328:	90 e0       	ldi	r25, 0x00	; 0
    132a:	a0 e0       	ldi	r26, 0x00	; 0
    132c:	b0 e4       	ldi	r27, 0x40	; 64
    132e:	8b 87       	std	Y+11, r24	; 0x0b
    1330:	9c 87       	std	Y+12, r25	; 0x0c
    1332:	ad 87       	std	Y+13, r26	; 0x0d
    1334:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1336:	6b 85       	ldd	r22, Y+11	; 0x0b
    1338:	7c 85       	ldd	r23, Y+12	; 0x0c
    133a:	8d 85       	ldd	r24, Y+13	; 0x0d
    133c:	9e 85       	ldd	r25, Y+14	; 0x0e
    133e:	20 e0       	ldi	r18, 0x00	; 0
    1340:	30 e0       	ldi	r19, 0x00	; 0
    1342:	4a ef       	ldi	r20, 0xFA	; 250
    1344:	54 e4       	ldi	r21, 0x44	; 68
    1346:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    134a:	dc 01       	movw	r26, r24
    134c:	cb 01       	movw	r24, r22
    134e:	8f 83       	std	Y+7, r24	; 0x07
    1350:	98 87       	std	Y+8, r25	; 0x08
    1352:	a9 87       	std	Y+9, r26	; 0x09
    1354:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1356:	6f 81       	ldd	r22, Y+7	; 0x07
    1358:	78 85       	ldd	r23, Y+8	; 0x08
    135a:	89 85       	ldd	r24, Y+9	; 0x09
    135c:	9a 85       	ldd	r25, Y+10	; 0x0a
    135e:	20 e0       	ldi	r18, 0x00	; 0
    1360:	30 e0       	ldi	r19, 0x00	; 0
    1362:	40 e8       	ldi	r20, 0x80	; 128
    1364:	5f e3       	ldi	r21, 0x3F	; 63
    1366:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    136a:	88 23       	and	r24, r24
    136c:	2c f4       	brge	.+10     	; 0x1378 <LCD_voidInit+0x37c>
		__ticks = 1;
    136e:	81 e0       	ldi	r24, 0x01	; 1
    1370:	90 e0       	ldi	r25, 0x00	; 0
    1372:	9e 83       	std	Y+6, r25	; 0x06
    1374:	8d 83       	std	Y+5, r24	; 0x05
    1376:	3f c0       	rjmp	.+126    	; 0x13f6 <LCD_voidInit+0x3fa>
	else if (__tmp > 65535)
    1378:	6f 81       	ldd	r22, Y+7	; 0x07
    137a:	78 85       	ldd	r23, Y+8	; 0x08
    137c:	89 85       	ldd	r24, Y+9	; 0x09
    137e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1380:	20 e0       	ldi	r18, 0x00	; 0
    1382:	3f ef       	ldi	r19, 0xFF	; 255
    1384:	4f e7       	ldi	r20, 0x7F	; 127
    1386:	57 e4       	ldi	r21, 0x47	; 71
    1388:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    138c:	18 16       	cp	r1, r24
    138e:	4c f5       	brge	.+82     	; 0x13e2 <LCD_voidInit+0x3e6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1390:	6b 85       	ldd	r22, Y+11	; 0x0b
    1392:	7c 85       	ldd	r23, Y+12	; 0x0c
    1394:	8d 85       	ldd	r24, Y+13	; 0x0d
    1396:	9e 85       	ldd	r25, Y+14	; 0x0e
    1398:	20 e0       	ldi	r18, 0x00	; 0
    139a:	30 e0       	ldi	r19, 0x00	; 0
    139c:	40 e2       	ldi	r20, 0x20	; 32
    139e:	51 e4       	ldi	r21, 0x41	; 65
    13a0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    13a4:	dc 01       	movw	r26, r24
    13a6:	cb 01       	movw	r24, r22
    13a8:	bc 01       	movw	r22, r24
    13aa:	cd 01       	movw	r24, r26
    13ac:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    13b0:	dc 01       	movw	r26, r24
    13b2:	cb 01       	movw	r24, r22
    13b4:	9e 83       	std	Y+6, r25	; 0x06
    13b6:	8d 83       	std	Y+5, r24	; 0x05
    13b8:	0f c0       	rjmp	.+30     	; 0x13d8 <LCD_voidInit+0x3dc>
    13ba:	88 ec       	ldi	r24, 0xC8	; 200
    13bc:	90 e0       	ldi	r25, 0x00	; 0
    13be:	9c 83       	std	Y+4, r25	; 0x04
    13c0:	8b 83       	std	Y+3, r24	; 0x03
    13c2:	8b 81       	ldd	r24, Y+3	; 0x03
    13c4:	9c 81       	ldd	r25, Y+4	; 0x04
    13c6:	01 97       	sbiw	r24, 0x01	; 1
    13c8:	f1 f7       	brne	.-4      	; 0x13c6 <LCD_voidInit+0x3ca>
    13ca:	9c 83       	std	Y+4, r25	; 0x04
    13cc:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    13ce:	8d 81       	ldd	r24, Y+5	; 0x05
    13d0:	9e 81       	ldd	r25, Y+6	; 0x06
    13d2:	01 97       	sbiw	r24, 0x01	; 1
    13d4:	9e 83       	std	Y+6, r25	; 0x06
    13d6:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    13d8:	8d 81       	ldd	r24, Y+5	; 0x05
    13da:	9e 81       	ldd	r25, Y+6	; 0x06
    13dc:	00 97       	sbiw	r24, 0x00	; 0
    13de:	69 f7       	brne	.-38     	; 0x13ba <LCD_voidInit+0x3be>
    13e0:	14 c0       	rjmp	.+40     	; 0x140a <LCD_voidInit+0x40e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    13e2:	6f 81       	ldd	r22, Y+7	; 0x07
    13e4:	78 85       	ldd	r23, Y+8	; 0x08
    13e6:	89 85       	ldd	r24, Y+9	; 0x09
    13e8:	9a 85       	ldd	r25, Y+10	; 0x0a
    13ea:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    13ee:	dc 01       	movw	r26, r24
    13f0:	cb 01       	movw	r24, r22
    13f2:	9e 83       	std	Y+6, r25	; 0x06
    13f4:	8d 83       	std	Y+5, r24	; 0x05
    13f6:	8d 81       	ldd	r24, Y+5	; 0x05
    13f8:	9e 81       	ldd	r25, Y+6	; 0x06
    13fa:	9a 83       	std	Y+2, r25	; 0x02
    13fc:	89 83       	std	Y+1, r24	; 0x01
    13fe:	89 81       	ldd	r24, Y+1	; 0x01
    1400:	9a 81       	ldd	r25, Y+2	; 0x02
    1402:	01 97       	sbiw	r24, 0x01	; 1
    1404:	f1 f7       	brne	.-4      	; 0x1402 <LCD_voidInit+0x406>
    1406:	9a 83       	std	Y+2, r25	; 0x02
    1408:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
	//LCD_voidWriteCommand(0b00000001); // Entry mode set

}
    140a:	e8 96       	adiw	r28, 0x38	; 56
    140c:	0f b6       	in	r0, 0x3f	; 63
    140e:	f8 94       	cli
    1410:	de bf       	out	0x3e, r29	; 62
    1412:	0f be       	out	0x3f, r0	; 63
    1414:	cd bf       	out	0x3d, r28	; 61
    1416:	cf 91       	pop	r28
    1418:	df 91       	pop	r29
    141a:	08 95       	ret

0000141c <LCD_voidWriteCommand>:

extern void LCD_voidWriteCommand(u8 command)
{
    141c:	df 93       	push	r29
    141e:	cf 93       	push	r28
    1420:	cd b7       	in	r28, 0x3d	; 61
    1422:	de b7       	in	r29, 0x3e	; 62
    1424:	2f 97       	sbiw	r28, 0x0f	; 15
    1426:	0f b6       	in	r0, 0x3f	; 63
    1428:	f8 94       	cli
    142a:	de bf       	out	0x3e, r29	; 62
    142c:	0f be       	out	0x3f, r0	; 63
    142e:	cd bf       	out	0x3d, r28	; 61
    1430:	8f 87       	std	Y+15, r24	; 0x0f
	// RS=0 to make command
	DIO_voidWritePIN(DIO_u8PinB1,DIO_u8LOW);
    1432:	89 e0       	ldi	r24, 0x09	; 9
    1434:	60 e0       	ldi	r22, 0x00	; 0
    1436:	0e 94 7d 06 	call	0xcfa	; 0xcfa <DIO_voidWritePIN>

	// RW=0 to write
	DIO_voidWritePIN(DIO_u8PinB2,DIO_u8LOW);
    143a:	8a e0       	ldi	r24, 0x0A	; 10
    143c:	60 e0       	ldi	r22, 0x00	; 0
    143e:	0e 94 7d 06 	call	0xcfa	; 0xcfa <DIO_voidWritePIN>

	// read the command
	PORTC=command;
    1442:	e5 e3       	ldi	r30, 0x35	; 53
    1444:	f0 e0       	ldi	r31, 0x00	; 0
    1446:	8f 85       	ldd	r24, Y+15	; 0x0f
    1448:	80 83       	st	Z, r24

	// enable the EN pin for 2ms then disable it
	DIO_voidWritePIN(DIO_u8PinB0,DIO_u8HIGH);
    144a:	88 e0       	ldi	r24, 0x08	; 8
    144c:	61 e0       	ldi	r22, 0x01	; 1
    144e:	0e 94 7d 06 	call	0xcfa	; 0xcfa <DIO_voidWritePIN>
    1452:	80 e0       	ldi	r24, 0x00	; 0
    1454:	90 e0       	ldi	r25, 0x00	; 0
    1456:	a0 e0       	ldi	r26, 0x00	; 0
    1458:	b0 e4       	ldi	r27, 0x40	; 64
    145a:	8b 87       	std	Y+11, r24	; 0x0b
    145c:	9c 87       	std	Y+12, r25	; 0x0c
    145e:	ad 87       	std	Y+13, r26	; 0x0d
    1460:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1462:	6b 85       	ldd	r22, Y+11	; 0x0b
    1464:	7c 85       	ldd	r23, Y+12	; 0x0c
    1466:	8d 85       	ldd	r24, Y+13	; 0x0d
    1468:	9e 85       	ldd	r25, Y+14	; 0x0e
    146a:	20 e0       	ldi	r18, 0x00	; 0
    146c:	30 e0       	ldi	r19, 0x00	; 0
    146e:	4a ef       	ldi	r20, 0xFA	; 250
    1470:	54 e4       	ldi	r21, 0x44	; 68
    1472:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1476:	dc 01       	movw	r26, r24
    1478:	cb 01       	movw	r24, r22
    147a:	8f 83       	std	Y+7, r24	; 0x07
    147c:	98 87       	std	Y+8, r25	; 0x08
    147e:	a9 87       	std	Y+9, r26	; 0x09
    1480:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1482:	6f 81       	ldd	r22, Y+7	; 0x07
    1484:	78 85       	ldd	r23, Y+8	; 0x08
    1486:	89 85       	ldd	r24, Y+9	; 0x09
    1488:	9a 85       	ldd	r25, Y+10	; 0x0a
    148a:	20 e0       	ldi	r18, 0x00	; 0
    148c:	30 e0       	ldi	r19, 0x00	; 0
    148e:	40 e8       	ldi	r20, 0x80	; 128
    1490:	5f e3       	ldi	r21, 0x3F	; 63
    1492:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1496:	88 23       	and	r24, r24
    1498:	2c f4       	brge	.+10     	; 0x14a4 <LCD_voidWriteCommand+0x88>
		__ticks = 1;
    149a:	81 e0       	ldi	r24, 0x01	; 1
    149c:	90 e0       	ldi	r25, 0x00	; 0
    149e:	9e 83       	std	Y+6, r25	; 0x06
    14a0:	8d 83       	std	Y+5, r24	; 0x05
    14a2:	3f c0       	rjmp	.+126    	; 0x1522 <LCD_voidWriteCommand+0x106>
	else if (__tmp > 65535)
    14a4:	6f 81       	ldd	r22, Y+7	; 0x07
    14a6:	78 85       	ldd	r23, Y+8	; 0x08
    14a8:	89 85       	ldd	r24, Y+9	; 0x09
    14aa:	9a 85       	ldd	r25, Y+10	; 0x0a
    14ac:	20 e0       	ldi	r18, 0x00	; 0
    14ae:	3f ef       	ldi	r19, 0xFF	; 255
    14b0:	4f e7       	ldi	r20, 0x7F	; 127
    14b2:	57 e4       	ldi	r21, 0x47	; 71
    14b4:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    14b8:	18 16       	cp	r1, r24
    14ba:	4c f5       	brge	.+82     	; 0x150e <LCD_voidWriteCommand+0xf2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    14bc:	6b 85       	ldd	r22, Y+11	; 0x0b
    14be:	7c 85       	ldd	r23, Y+12	; 0x0c
    14c0:	8d 85       	ldd	r24, Y+13	; 0x0d
    14c2:	9e 85       	ldd	r25, Y+14	; 0x0e
    14c4:	20 e0       	ldi	r18, 0x00	; 0
    14c6:	30 e0       	ldi	r19, 0x00	; 0
    14c8:	40 e2       	ldi	r20, 0x20	; 32
    14ca:	51 e4       	ldi	r21, 0x41	; 65
    14cc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    14d0:	dc 01       	movw	r26, r24
    14d2:	cb 01       	movw	r24, r22
    14d4:	bc 01       	movw	r22, r24
    14d6:	cd 01       	movw	r24, r26
    14d8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    14dc:	dc 01       	movw	r26, r24
    14de:	cb 01       	movw	r24, r22
    14e0:	9e 83       	std	Y+6, r25	; 0x06
    14e2:	8d 83       	std	Y+5, r24	; 0x05
    14e4:	0f c0       	rjmp	.+30     	; 0x1504 <LCD_voidWriteCommand+0xe8>
    14e6:	88 ec       	ldi	r24, 0xC8	; 200
    14e8:	90 e0       	ldi	r25, 0x00	; 0
    14ea:	9c 83       	std	Y+4, r25	; 0x04
    14ec:	8b 83       	std	Y+3, r24	; 0x03
    14ee:	8b 81       	ldd	r24, Y+3	; 0x03
    14f0:	9c 81       	ldd	r25, Y+4	; 0x04
    14f2:	01 97       	sbiw	r24, 0x01	; 1
    14f4:	f1 f7       	brne	.-4      	; 0x14f2 <LCD_voidWriteCommand+0xd6>
    14f6:	9c 83       	std	Y+4, r25	; 0x04
    14f8:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    14fa:	8d 81       	ldd	r24, Y+5	; 0x05
    14fc:	9e 81       	ldd	r25, Y+6	; 0x06
    14fe:	01 97       	sbiw	r24, 0x01	; 1
    1500:	9e 83       	std	Y+6, r25	; 0x06
    1502:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1504:	8d 81       	ldd	r24, Y+5	; 0x05
    1506:	9e 81       	ldd	r25, Y+6	; 0x06
    1508:	00 97       	sbiw	r24, 0x00	; 0
    150a:	69 f7       	brne	.-38     	; 0x14e6 <LCD_voidWriteCommand+0xca>
    150c:	14 c0       	rjmp	.+40     	; 0x1536 <LCD_voidWriteCommand+0x11a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    150e:	6f 81       	ldd	r22, Y+7	; 0x07
    1510:	78 85       	ldd	r23, Y+8	; 0x08
    1512:	89 85       	ldd	r24, Y+9	; 0x09
    1514:	9a 85       	ldd	r25, Y+10	; 0x0a
    1516:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    151a:	dc 01       	movw	r26, r24
    151c:	cb 01       	movw	r24, r22
    151e:	9e 83       	std	Y+6, r25	; 0x06
    1520:	8d 83       	std	Y+5, r24	; 0x05
    1522:	8d 81       	ldd	r24, Y+5	; 0x05
    1524:	9e 81       	ldd	r25, Y+6	; 0x06
    1526:	9a 83       	std	Y+2, r25	; 0x02
    1528:	89 83       	std	Y+1, r24	; 0x01
    152a:	89 81       	ldd	r24, Y+1	; 0x01
    152c:	9a 81       	ldd	r25, Y+2	; 0x02
    152e:	01 97       	sbiw	r24, 0x01	; 1
    1530:	f1 f7       	brne	.-4      	; 0x152e <LCD_voidWriteCommand+0x112>
    1532:	9a 83       	std	Y+2, r25	; 0x02
    1534:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms (2);
	DIO_voidWritePIN(DIO_u8PinB0,DIO_u8LOW);
    1536:	88 e0       	ldi	r24, 0x08	; 8
    1538:	60 e0       	ldi	r22, 0x00	; 0
    153a:	0e 94 7d 06 	call	0xcfa	; 0xcfa <DIO_voidWritePIN>
}
    153e:	2f 96       	adiw	r28, 0x0f	; 15
    1540:	0f b6       	in	r0, 0x3f	; 63
    1542:	f8 94       	cli
    1544:	de bf       	out	0x3e, r29	; 62
    1546:	0f be       	out	0x3f, r0	; 63
    1548:	cd bf       	out	0x3d, r28	; 61
    154a:	cf 91       	pop	r28
    154c:	df 91       	pop	r29
    154e:	08 95       	ret

00001550 <LCD_voidDisplay>:

extern void LCD_voidDisplay(u8 data)
{
    1550:	df 93       	push	r29
    1552:	cf 93       	push	r28
    1554:	cd b7       	in	r28, 0x3d	; 61
    1556:	de b7       	in	r29, 0x3e	; 62
    1558:	2f 97       	sbiw	r28, 0x0f	; 15
    155a:	0f b6       	in	r0, 0x3f	; 63
    155c:	f8 94       	cli
    155e:	de bf       	out	0x3e, r29	; 62
    1560:	0f be       	out	0x3f, r0	; 63
    1562:	cd bf       	out	0x3d, r28	; 61
    1564:	8f 87       	std	Y+15, r24	; 0x0f
	// RS=1 to dispaly
		DIO_voidWritePIN(DIO_u8PinB1,DIO_u8HIGH);
    1566:	89 e0       	ldi	r24, 0x09	; 9
    1568:	61 e0       	ldi	r22, 0x01	; 1
    156a:	0e 94 7d 06 	call	0xcfa	; 0xcfa <DIO_voidWritePIN>

	// RW=0 to write
	DIO_voidWritePIN(DIO_u8PinB2,DIO_u8LOW);
    156e:	8a e0       	ldi	r24, 0x0A	; 10
    1570:	60 e0       	ldi	r22, 0x00	; 0
    1572:	0e 94 7d 06 	call	0xcfa	; 0xcfa <DIO_voidWritePIN>

	// read the data
	PORTC=data;
    1576:	e5 e3       	ldi	r30, 0x35	; 53
    1578:	f0 e0       	ldi	r31, 0x00	; 0
    157a:	8f 85       	ldd	r24, Y+15	; 0x0f
    157c:	80 83       	st	Z, r24
	// enable the EN pin for 2ms then disable it
	DIO_voidWritePIN(DIO_u8PinB0,DIO_u8HIGH);
    157e:	88 e0       	ldi	r24, 0x08	; 8
    1580:	61 e0       	ldi	r22, 0x01	; 1
    1582:	0e 94 7d 06 	call	0xcfa	; 0xcfa <DIO_voidWritePIN>
    1586:	80 e0       	ldi	r24, 0x00	; 0
    1588:	90 e0       	ldi	r25, 0x00	; 0
    158a:	a0 e0       	ldi	r26, 0x00	; 0
    158c:	b0 e4       	ldi	r27, 0x40	; 64
    158e:	8b 87       	std	Y+11, r24	; 0x0b
    1590:	9c 87       	std	Y+12, r25	; 0x0c
    1592:	ad 87       	std	Y+13, r26	; 0x0d
    1594:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1596:	6b 85       	ldd	r22, Y+11	; 0x0b
    1598:	7c 85       	ldd	r23, Y+12	; 0x0c
    159a:	8d 85       	ldd	r24, Y+13	; 0x0d
    159c:	9e 85       	ldd	r25, Y+14	; 0x0e
    159e:	20 e0       	ldi	r18, 0x00	; 0
    15a0:	30 e0       	ldi	r19, 0x00	; 0
    15a2:	4a ef       	ldi	r20, 0xFA	; 250
    15a4:	54 e4       	ldi	r21, 0x44	; 68
    15a6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    15aa:	dc 01       	movw	r26, r24
    15ac:	cb 01       	movw	r24, r22
    15ae:	8f 83       	std	Y+7, r24	; 0x07
    15b0:	98 87       	std	Y+8, r25	; 0x08
    15b2:	a9 87       	std	Y+9, r26	; 0x09
    15b4:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    15b6:	6f 81       	ldd	r22, Y+7	; 0x07
    15b8:	78 85       	ldd	r23, Y+8	; 0x08
    15ba:	89 85       	ldd	r24, Y+9	; 0x09
    15bc:	9a 85       	ldd	r25, Y+10	; 0x0a
    15be:	20 e0       	ldi	r18, 0x00	; 0
    15c0:	30 e0       	ldi	r19, 0x00	; 0
    15c2:	40 e8       	ldi	r20, 0x80	; 128
    15c4:	5f e3       	ldi	r21, 0x3F	; 63
    15c6:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    15ca:	88 23       	and	r24, r24
    15cc:	2c f4       	brge	.+10     	; 0x15d8 <LCD_voidDisplay+0x88>
		__ticks = 1;
    15ce:	81 e0       	ldi	r24, 0x01	; 1
    15d0:	90 e0       	ldi	r25, 0x00	; 0
    15d2:	9e 83       	std	Y+6, r25	; 0x06
    15d4:	8d 83       	std	Y+5, r24	; 0x05
    15d6:	3f c0       	rjmp	.+126    	; 0x1656 <LCD_voidDisplay+0x106>
	else if (__tmp > 65535)
    15d8:	6f 81       	ldd	r22, Y+7	; 0x07
    15da:	78 85       	ldd	r23, Y+8	; 0x08
    15dc:	89 85       	ldd	r24, Y+9	; 0x09
    15de:	9a 85       	ldd	r25, Y+10	; 0x0a
    15e0:	20 e0       	ldi	r18, 0x00	; 0
    15e2:	3f ef       	ldi	r19, 0xFF	; 255
    15e4:	4f e7       	ldi	r20, 0x7F	; 127
    15e6:	57 e4       	ldi	r21, 0x47	; 71
    15e8:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    15ec:	18 16       	cp	r1, r24
    15ee:	4c f5       	brge	.+82     	; 0x1642 <LCD_voidDisplay+0xf2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    15f0:	6b 85       	ldd	r22, Y+11	; 0x0b
    15f2:	7c 85       	ldd	r23, Y+12	; 0x0c
    15f4:	8d 85       	ldd	r24, Y+13	; 0x0d
    15f6:	9e 85       	ldd	r25, Y+14	; 0x0e
    15f8:	20 e0       	ldi	r18, 0x00	; 0
    15fa:	30 e0       	ldi	r19, 0x00	; 0
    15fc:	40 e2       	ldi	r20, 0x20	; 32
    15fe:	51 e4       	ldi	r21, 0x41	; 65
    1600:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1604:	dc 01       	movw	r26, r24
    1606:	cb 01       	movw	r24, r22
    1608:	bc 01       	movw	r22, r24
    160a:	cd 01       	movw	r24, r26
    160c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1610:	dc 01       	movw	r26, r24
    1612:	cb 01       	movw	r24, r22
    1614:	9e 83       	std	Y+6, r25	; 0x06
    1616:	8d 83       	std	Y+5, r24	; 0x05
    1618:	0f c0       	rjmp	.+30     	; 0x1638 <LCD_voidDisplay+0xe8>
    161a:	88 ec       	ldi	r24, 0xC8	; 200
    161c:	90 e0       	ldi	r25, 0x00	; 0
    161e:	9c 83       	std	Y+4, r25	; 0x04
    1620:	8b 83       	std	Y+3, r24	; 0x03
    1622:	8b 81       	ldd	r24, Y+3	; 0x03
    1624:	9c 81       	ldd	r25, Y+4	; 0x04
    1626:	01 97       	sbiw	r24, 0x01	; 1
    1628:	f1 f7       	brne	.-4      	; 0x1626 <LCD_voidDisplay+0xd6>
    162a:	9c 83       	std	Y+4, r25	; 0x04
    162c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    162e:	8d 81       	ldd	r24, Y+5	; 0x05
    1630:	9e 81       	ldd	r25, Y+6	; 0x06
    1632:	01 97       	sbiw	r24, 0x01	; 1
    1634:	9e 83       	std	Y+6, r25	; 0x06
    1636:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1638:	8d 81       	ldd	r24, Y+5	; 0x05
    163a:	9e 81       	ldd	r25, Y+6	; 0x06
    163c:	00 97       	sbiw	r24, 0x00	; 0
    163e:	69 f7       	brne	.-38     	; 0x161a <LCD_voidDisplay+0xca>
    1640:	14 c0       	rjmp	.+40     	; 0x166a <LCD_voidDisplay+0x11a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1642:	6f 81       	ldd	r22, Y+7	; 0x07
    1644:	78 85       	ldd	r23, Y+8	; 0x08
    1646:	89 85       	ldd	r24, Y+9	; 0x09
    1648:	9a 85       	ldd	r25, Y+10	; 0x0a
    164a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    164e:	dc 01       	movw	r26, r24
    1650:	cb 01       	movw	r24, r22
    1652:	9e 83       	std	Y+6, r25	; 0x06
    1654:	8d 83       	std	Y+5, r24	; 0x05
    1656:	8d 81       	ldd	r24, Y+5	; 0x05
    1658:	9e 81       	ldd	r25, Y+6	; 0x06
    165a:	9a 83       	std	Y+2, r25	; 0x02
    165c:	89 83       	std	Y+1, r24	; 0x01
    165e:	89 81       	ldd	r24, Y+1	; 0x01
    1660:	9a 81       	ldd	r25, Y+2	; 0x02
    1662:	01 97       	sbiw	r24, 0x01	; 1
    1664:	f1 f7       	brne	.-4      	; 0x1662 <LCD_voidDisplay+0x112>
    1666:	9a 83       	std	Y+2, r25	; 0x02
    1668:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms (2);
	DIO_voidWritePIN(DIO_u8PinB0,DIO_u8LOW);
    166a:	88 e0       	ldi	r24, 0x08	; 8
    166c:	60 e0       	ldi	r22, 0x00	; 0
    166e:	0e 94 7d 06 	call	0xcfa	; 0xcfa <DIO_voidWritePIN>
}
    1672:	2f 96       	adiw	r28, 0x0f	; 15
    1674:	0f b6       	in	r0, 0x3f	; 63
    1676:	f8 94       	cli
    1678:	de bf       	out	0x3e, r29	; 62
    167a:	0f be       	out	0x3f, r0	; 63
    167c:	cd bf       	out	0x3d, r28	; 61
    167e:	cf 91       	pop	r28
    1680:	df 91       	pop	r29
    1682:	08 95       	ret

00001684 <SPI_Init>:
u8 flag=1;
extern u8 arr[4];
const SPI_CfgType * CfgPtr;

void SPI_Init(void)
{
    1684:	df 93       	push	r29
    1686:	cf 93       	push	r28
    1688:	cd b7       	in	r28, 0x3d	; 61
    168a:	de b7       	in	r29, 0x3e	; 62
	CfgPtr = &SPI_ConfigParam [0];
    168c:	89 e6       	ldi	r24, 0x69	; 105
    168e:	90 e0       	ldi	r25, 0x00	; 0
    1690:	90 93 74 00 	sts	0x0074, r25
    1694:	80 93 73 00 	sts	0x0073, r24
	// Enable Global Interrupt
	set_bit(SREG,7);
    1698:	af e5       	ldi	r26, 0x5F	; 95
    169a:	b0 e0       	ldi	r27, 0x00	; 0
    169c:	ef e5       	ldi	r30, 0x5F	; 95
    169e:	f0 e0       	ldi	r31, 0x00	; 0
    16a0:	80 81       	ld	r24, Z
    16a2:	80 68       	ori	r24, 0x80	; 128
    16a4:	8c 93       	st	X, r24
	if (CfgPtr->SPI_Type==1)
    16a6:	e0 91 73 00 	lds	r30, 0x0073
    16aa:	f0 91 74 00 	lds	r31, 0x0074
    16ae:	80 81       	ld	r24, Z
    16b0:	81 30       	cpi	r24, 0x01	; 1
    16b2:	09 f0       	breq	.+2      	; 0x16b6 <SPI_Init+0x32>
    16b4:	63 c0       	rjmp	.+198    	; 0x177c <SPI_Init+0xf8>
		{
			DIO_voidSetDirection(MISO,DIO_u8PinIp);
    16b6:	8e e0       	ldi	r24, 0x0E	; 14
    16b8:	60 e0       	ldi	r22, 0x00	; 0
    16ba:	0e 94 a3 05 	call	0xb46	; 0xb46 <DIO_voidSetDirection>
			DIO_voidSetDirection(MOSI,DIO_u8PinOp);
    16be:	8d e0       	ldi	r24, 0x0D	; 13
    16c0:	61 e0       	ldi	r22, 0x01	; 1
    16c2:	0e 94 a3 05 	call	0xb46	; 0xb46 <DIO_voidSetDirection>
			DIO_voidSetDirection(SS_Low,DIO_u8PinOp);
    16c6:	8c e0       	ldi	r24, 0x0C	; 12
    16c8:	61 e0       	ldi	r22, 0x01	; 1
    16ca:	0e 94 a3 05 	call	0xb46	; 0xb46 <DIO_voidSetDirection>
			DIO_voidSetDirection(SCK,DIO_u8PinOp);
    16ce:	8f e0       	ldi	r24, 0x0F	; 15
    16d0:	61 e0       	ldi	r22, 0x01	; 1
    16d2:	0e 94 a3 05 	call	0xb46	; 0xb46 <DIO_voidSetDirection>
			SPCR |= 1<<7 | 1<<6 | CfgPtr->Data_Order << 5 | CfgPtr->SPI_Type << 4 | CfgPtr->Clock_Polarity << 3 | CfgPtr->Clock_Phase << 2 |CfgPtr->Clock_Sel1 << 1 |CfgPtr->Clock_Sel0 << 0;
    16d6:	ad e2       	ldi	r26, 0x2D	; 45
    16d8:	b0 e0       	ldi	r27, 0x00	; 0
    16da:	ed e2       	ldi	r30, 0x2D	; 45
    16dc:	f0 e0       	ldi	r31, 0x00	; 0
    16de:	80 81       	ld	r24, Z
    16e0:	38 2f       	mov	r19, r24
    16e2:	e0 91 73 00 	lds	r30, 0x0073
    16e6:	f0 91 74 00 	lds	r31, 0x0074
    16ea:	81 81       	ldd	r24, Z+1	; 0x01
    16ec:	88 2f       	mov	r24, r24
    16ee:	90 e0       	ldi	r25, 0x00	; 0
    16f0:	88 0f       	add	r24, r24
    16f2:	99 1f       	adc	r25, r25
    16f4:	82 95       	swap	r24
    16f6:	92 95       	swap	r25
    16f8:	90 7f       	andi	r25, 0xF0	; 240
    16fa:	98 27       	eor	r25, r24
    16fc:	80 7f       	andi	r24, 0xF0	; 240
    16fe:	98 27       	eor	r25, r24
    1700:	28 2f       	mov	r18, r24
    1702:	20 6c       	ori	r18, 0xC0	; 192
    1704:	e0 91 73 00 	lds	r30, 0x0073
    1708:	f0 91 74 00 	lds	r31, 0x0074
    170c:	80 81       	ld	r24, Z
    170e:	88 2f       	mov	r24, r24
    1710:	90 e0       	ldi	r25, 0x00	; 0
    1712:	82 95       	swap	r24
    1714:	92 95       	swap	r25
    1716:	90 7f       	andi	r25, 0xF0	; 240
    1718:	98 27       	eor	r25, r24
    171a:	80 7f       	andi	r24, 0xF0	; 240
    171c:	98 27       	eor	r25, r24
    171e:	28 2b       	or	r18, r24
    1720:	e0 91 73 00 	lds	r30, 0x0073
    1724:	f0 91 74 00 	lds	r31, 0x0074
    1728:	85 81       	ldd	r24, Z+5	; 0x05
    172a:	88 2f       	mov	r24, r24
    172c:	90 e0       	ldi	r25, 0x00	; 0
    172e:	88 0f       	add	r24, r24
    1730:	99 1f       	adc	r25, r25
    1732:	88 0f       	add	r24, r24
    1734:	99 1f       	adc	r25, r25
    1736:	88 0f       	add	r24, r24
    1738:	99 1f       	adc	r25, r25
    173a:	28 2b       	or	r18, r24
    173c:	e0 91 73 00 	lds	r30, 0x0073
    1740:	f0 91 74 00 	lds	r31, 0x0074
    1744:	86 81       	ldd	r24, Z+6	; 0x06
    1746:	88 2f       	mov	r24, r24
    1748:	90 e0       	ldi	r25, 0x00	; 0
    174a:	88 0f       	add	r24, r24
    174c:	99 1f       	adc	r25, r25
    174e:	88 0f       	add	r24, r24
    1750:	99 1f       	adc	r25, r25
    1752:	28 2b       	or	r18, r24
    1754:	e0 91 73 00 	lds	r30, 0x0073
    1758:	f0 91 74 00 	lds	r31, 0x0074
    175c:	83 81       	ldd	r24, Z+3	; 0x03
    175e:	88 2f       	mov	r24, r24
    1760:	90 e0       	ldi	r25, 0x00	; 0
    1762:	88 0f       	add	r24, r24
    1764:	99 1f       	adc	r25, r25
    1766:	92 2f       	mov	r25, r18
    1768:	98 2b       	or	r25, r24
    176a:	e0 91 73 00 	lds	r30, 0x0073
    176e:	f0 91 74 00 	lds	r31, 0x0074
    1772:	82 81       	ldd	r24, Z+2	; 0x02
    1774:	89 2b       	or	r24, r25
    1776:	83 2b       	or	r24, r19
    1778:	8c 93       	st	X, r24
    177a:	2d c0       	rjmp	.+90     	; 0x17d6 <SPI_Init+0x152>
			//SPSR |= CfgPtr->Clock_Sel2 << 0;
		}
	else if (CfgPtr->SPI_Type==0)
    177c:	e0 91 73 00 	lds	r30, 0x0073
    1780:	f0 91 74 00 	lds	r31, 0x0074
    1784:	80 81       	ld	r24, Z
    1786:	88 23       	and	r24, r24
    1788:	31 f5       	brne	.+76     	; 0x17d6 <SPI_Init+0x152>
		{
			DIO_voidSetDirection(MISO,DIO_u8PinOp);
    178a:	8e e0       	ldi	r24, 0x0E	; 14
    178c:	61 e0       	ldi	r22, 0x01	; 1
    178e:	0e 94 a3 05 	call	0xb46	; 0xb46 <DIO_voidSetDirection>
			DIO_voidSetDirection(MOSI,DIO_u8PinIp);
    1792:	8d e0       	ldi	r24, 0x0D	; 13
    1794:	60 e0       	ldi	r22, 0x00	; 0
    1796:	0e 94 a3 05 	call	0xb46	; 0xb46 <DIO_voidSetDirection>
			DIO_voidSetDirection(SS_Low,DIO_u8PinIp);
    179a:	8c e0       	ldi	r24, 0x0C	; 12
    179c:	60 e0       	ldi	r22, 0x00	; 0
    179e:	0e 94 a3 05 	call	0xb46	; 0xb46 <DIO_voidSetDirection>
			DIO_voidSetDirection(SCK,DIO_u8PinIp);
    17a2:	8f e0       	ldi	r24, 0x0F	; 15
    17a4:	60 e0       	ldi	r22, 0x00	; 0
    17a6:	0e 94 a3 05 	call	0xb46	; 0xb46 <DIO_voidSetDirection>
			SPCR |= 1<<7 | 1<<6 | CfgPtr->SPI_Type << 4 ;
    17aa:	ad e2       	ldi	r26, 0x2D	; 45
    17ac:	b0 e0       	ldi	r27, 0x00	; 0
    17ae:	ed e2       	ldi	r30, 0x2D	; 45
    17b0:	f0 e0       	ldi	r31, 0x00	; 0
    17b2:	80 81       	ld	r24, Z
    17b4:	28 2f       	mov	r18, r24
    17b6:	e0 91 73 00 	lds	r30, 0x0073
    17ba:	f0 91 74 00 	lds	r31, 0x0074
    17be:	80 81       	ld	r24, Z
    17c0:	88 2f       	mov	r24, r24
    17c2:	90 e0       	ldi	r25, 0x00	; 0
    17c4:	82 95       	swap	r24
    17c6:	92 95       	swap	r25
    17c8:	90 7f       	andi	r25, 0xF0	; 240
    17ca:	98 27       	eor	r25, r24
    17cc:	80 7f       	andi	r24, 0xF0	; 240
    17ce:	98 27       	eor	r25, r24
    17d0:	80 6c       	ori	r24, 0xC0	; 192
    17d2:	82 2b       	or	r24, r18
    17d4:	8c 93       	st	X, r24
		}
}
    17d6:	cf 91       	pop	r28
    17d8:	df 91       	pop	r29
    17da:	08 95       	ret

000017dc <SPI_Transmit>:

void SPI_Transmit(u8 data){
    17dc:	df 93       	push	r29
    17de:	cf 93       	push	r28
    17e0:	00 d0       	rcall	.+0      	; 0x17e2 <SPI_Transmit+0x6>
    17e2:	cd b7       	in	r28, 0x3d	; 61
    17e4:	de b7       	in	r29, 0x3e	; 62
    17e6:	8a 83       	std	Y+2, r24	; 0x02
	SPDR=data;
    17e8:	ef e2       	ldi	r30, 0x2F	; 47
    17ea:	f0 e0       	ldi	r31, 0x00	; 0
    17ec:	8a 81       	ldd	r24, Y+2	; 0x02
    17ee:	80 83       	st	Z, r24
	while (!get_bit(SPSR,7));
	u8 temp = SPDR;
    17f0:	ef e2       	ldi	r30, 0x2F	; 47
    17f2:	f0 e0       	ldi	r31, 0x00	; 0
    17f4:	80 81       	ld	r24, Z
    17f6:	89 83       	std	Y+1, r24	; 0x01
}
    17f8:	0f 90       	pop	r0
    17fa:	0f 90       	pop	r0
    17fc:	cf 91       	pop	r28
    17fe:	df 91       	pop	r29
    1800:	08 95       	ret

00001802 <SPI_Recieve>:
void SPI_Recieve(u8 *data){
    1802:	df 93       	push	r29
    1804:	cf 93       	push	r28
    1806:	00 d0       	rcall	.+0      	; 0x1808 <SPI_Recieve+0x6>
    1808:	cd b7       	in	r28, 0x3d	; 61
    180a:	de b7       	in	r29, 0x3e	; 62
    180c:	9a 83       	std	Y+2, r25	; 0x02
    180e:	89 83       	std	Y+1, r24	; 0x01
	
	SPI_Transmit(0x00);
    1810:	80 e0       	ldi	r24, 0x00	; 0
    1812:	0e 94 ee 0b 	call	0x17dc	; 0x17dc <SPI_Transmit>
	while (!get_bit(SPSR,7));
	SPDR_NewValue=SPDR;
    1816:	ef e2       	ldi	r30, 0x2F	; 47
    1818:	f0 e0       	ldi	r31, 0x00	; 0
    181a:	80 81       	ld	r24, Z
    181c:	80 93 70 00 	sts	0x0070, r24
	*data=SPDR;
    1820:	ef e2       	ldi	r30, 0x2F	; 47
    1822:	f0 e0       	ldi	r31, 0x00	; 0
    1824:	80 81       	ld	r24, Z
    1826:	e9 81       	ldd	r30, Y+1	; 0x01
    1828:	fa 81       	ldd	r31, Y+2	; 0x02
    182a:	80 83       	st	Z, r24
}
    182c:	0f 90       	pop	r0
    182e:	0f 90       	pop	r0
    1830:	cf 91       	pop	r28
    1832:	df 91       	pop	r29
    1834:	08 95       	ret

00001836 <__vector_12>:
void __vector_12 (void)  __attribute__((signal,__INTR_ATTRS));
void __vector_12 (void)
{
    1836:	1f 92       	push	r1
    1838:	0f 92       	push	r0
    183a:	0f b6       	in	r0, 0x3f	; 63
    183c:	0f 92       	push	r0
    183e:	11 24       	eor	r1, r1
    1840:	2f 93       	push	r18
    1842:	3f 93       	push	r19
    1844:	8f 93       	push	r24
    1846:	9f 93       	push	r25
    1848:	af 93       	push	r26
    184a:	bf 93       	push	r27
    184c:	ef 93       	push	r30
    184e:	ff 93       	push	r31
    1850:	df 93       	push	r29
    1852:	cf 93       	push	r28
    1854:	cd b7       	in	r28, 0x3d	; 61
    1856:	de b7       	in	r29, 0x3e	; 62
	flag=1;
    1858:	81 e0       	ldi	r24, 0x01	; 1
    185a:	80 93 68 00 	sts	0x0068, r24
	static u8 transfer_counter=0;
	SPDR_NewValue=SPDR;
    185e:	ef e2       	ldi	r30, 0x2F	; 47
    1860:	f0 e0       	ldi	r31, 0x00	; 0
    1862:	80 81       	ld	r24, Z
    1864:	80 93 70 00 	sts	0x0070, r24
	if (SPDR_NewValue==(10+transfer_counter))
    1868:	80 91 70 00 	lds	r24, 0x0070
    186c:	28 2f       	mov	r18, r24
    186e:	30 e0       	ldi	r19, 0x00	; 0
    1870:	80 91 71 00 	lds	r24, 0x0071
    1874:	88 2f       	mov	r24, r24
    1876:	90 e0       	ldi	r25, 0x00	; 0
    1878:	0a 96       	adiw	r24, 0x0a	; 10
    187a:	28 17       	cp	r18, r24
    187c:	39 07       	cpc	r19, r25
    187e:	81 f4       	brne	.+32     	; 0x18a0 <__vector_12+0x6a>
	{
		SPDR=arr[transfer_counter];
    1880:	af e2       	ldi	r26, 0x2F	; 47
    1882:	b0 e0       	ldi	r27, 0x00	; 0
    1884:	80 91 71 00 	lds	r24, 0x0071
    1888:	88 2f       	mov	r24, r24
    188a:	90 e0       	ldi	r25, 0x00	; 0
    188c:	fc 01       	movw	r30, r24
    188e:	eb 58       	subi	r30, 0x8B	; 139
    1890:	ff 4f       	sbci	r31, 0xFF	; 255
    1892:	80 81       	ld	r24, Z
    1894:	8c 93       	st	X, r24
		transfer_counter++;
    1896:	80 91 71 00 	lds	r24, 0x0071
    189a:	8f 5f       	subi	r24, 0xFF	; 255
    189c:	80 93 71 00 	sts	0x0071, r24
	}
	if (transfer_counter==4)
    18a0:	80 91 71 00 	lds	r24, 0x0071
    18a4:	84 30       	cpi	r24, 0x04	; 4
    18a6:	11 f4       	brne	.+4      	; 0x18ac <__vector_12+0x76>
	{
		transfer_counter=0;
    18a8:	10 92 71 00 	sts	0x0071, r1
	}
}
    18ac:	cf 91       	pop	r28
    18ae:	df 91       	pop	r29
    18b0:	ff 91       	pop	r31
    18b2:	ef 91       	pop	r30
    18b4:	bf 91       	pop	r27
    18b6:	af 91       	pop	r26
    18b8:	9f 91       	pop	r25
    18ba:	8f 91       	pop	r24
    18bc:	3f 91       	pop	r19
    18be:	2f 91       	pop	r18
    18c0:	0f 90       	pop	r0
    18c2:	0f be       	out	0x3f, r0	; 63
    18c4:	0f 90       	pop	r0
    18c6:	1f 90       	pop	r1
    18c8:	18 95       	reti

000018ca <main>:

#define asci_conv 48
#define end_transfer 16
u8 arr[4];
int main(void)
{
    18ca:	df 93       	push	r29
    18cc:	cf 93       	push	r28
    18ce:	cd b7       	in	r28, 0x3d	; 61
    18d0:	de b7       	in	r29, 0x3e	; 62
    18d2:	28 97       	sbiw	r28, 0x08	; 8
    18d4:	0f b6       	in	r0, 0x3f	; 63
    18d6:	f8 94       	cli
    18d8:	de bf       	out	0x3e, r29	; 62
    18da:	0f be       	out	0x3f, r0	; 63
    18dc:	cd bf       	out	0x3d, r28	; 61
	SPI_Init();
    18de:	0e 94 42 0b 	call	0x1684	; 0x1684 <SPI_Init>
	LCD_voidInit ();
    18e2:	0e 94 fe 07 	call	0xffc	; 0xffc <LCD_voidInit>
	LCD_voidWriteCommand(0x80);
    18e6:	80 e8       	ldi	r24, 0x80	; 128
    18e8:	0e 94 0e 0a 	call	0x141c	; 0x141c <LCD_voidWriteCommand>
	extern u8 SPDR_NewValue;
	extern u8 flag;
	u8 read_data=0;
    18ec:	1e 82       	std	Y+6, r1	; 0x06
	u8 data_arr[2];
	u8 spi_case=1;
    18ee:	81 e0       	ldi	r24, 0x01	; 1
    18f0:	8d 83       	std	Y+5, r24	; 0x05
	u8 temp_value=0;
    18f2:	1c 82       	std	Y+4, r1	; 0x04
	u8 bpm_value=0;
    18f4:	1b 82       	std	Y+3, r1	; 0x03
	u8 ox_value=0;
    18f6:	1a 82       	std	Y+2, r1	; 0x02
	if (spi_case==1)
    18f8:	8d 81       	ldd	r24, Y+5	; 0x05
    18fa:	81 30       	cpi	r24, 0x01	; 1
    18fc:	39 f4       	brne	.+14     	; 0x190c <main+0x42>
			{
				temp_value=36;
    18fe:	84 e2       	ldi	r24, 0x24	; 36
    1900:	8c 83       	std	Y+4, r24	; 0x04
				bpm_value=82;
    1902:	82 e5       	ldi	r24, 0x52	; 82
    1904:	8b 83       	std	Y+3, r24	; 0x03
				ox_value=93;
    1906:	8d e5       	ldi	r24, 0x5D	; 93
    1908:	8a 83       	std	Y+2, r24	; 0x02
    190a:	09 c0       	rjmp	.+18     	; 0x191e <main+0x54>
			}
			else if (spi_case==2)
    190c:	8d 81       	ldd	r24, Y+5	; 0x05
    190e:	82 30       	cpi	r24, 0x02	; 2
    1910:	31 f4       	brne	.+12     	; 0x191e <main+0x54>
			{
				temp_value=36;
    1912:	84 e2       	ldi	r24, 0x24	; 36
    1914:	8c 83       	std	Y+4, r24	; 0x04
				bpm_value=82;
    1916:	82 e5       	ldi	r24, 0x52	; 82
    1918:	8b 83       	std	Y+3, r24	; 0x03
				ox_value=93;
    191a:	8d e5       	ldi	r24, 0x5D	; 93
    191c:	8a 83       	std	Y+2, r24	; 0x02
			}

	arr[0]=temp_value;
    191e:	8c 81       	ldd	r24, Y+4	; 0x04
    1920:	80 93 75 00 	sts	0x0075, r24
	arr[1]=bpm_value;
    1924:	8b 81       	ldd	r24, Y+3	; 0x03
    1926:	80 93 76 00 	sts	0x0076, r24
	arr[2]=ox_value;
    192a:	8a 81       	ldd	r24, Y+2	; 0x02
    192c:	80 93 77 00 	sts	0x0077, r24
	arr[3]=end_transfer;
    1930:	80 e1       	ldi	r24, 0x10	; 16
    1932:	80 93 78 00 	sts	0x0078, r24
	while(1)
	{
		if (flag==1)
    1936:	80 91 68 00 	lds	r24, 0x0068
    193a:	81 30       	cpi	r24, 0x01	; 1
    193c:	e1 f7       	brne	.-8      	; 0x1936 <main+0x6c>
		{
			read_data = SPDR_NewValue;
    193e:	80 91 70 00 	lds	r24, 0x0070
    1942:	8e 83       	std	Y+6, r24	; 0x06
			for (u8 i=0 ; i<2 ; i++)
    1944:	19 82       	std	Y+1, r1	; 0x01
    1946:	19 c0       	rjmp	.+50     	; 0x197a <main+0xb0>
				{
					data_arr[i]=(read_data%10);
    1948:	89 81       	ldd	r24, Y+1	; 0x01
    194a:	48 2f       	mov	r20, r24
    194c:	50 e0       	ldi	r21, 0x00	; 0
    194e:	8e 81       	ldd	r24, Y+6	; 0x06
    1950:	9a e0       	ldi	r25, 0x0A	; 10
    1952:	69 2f       	mov	r22, r25
    1954:	0e 94 ce 0c 	call	0x199c	; 0x199c <__udivmodqi4>
    1958:	89 2f       	mov	r24, r25
    195a:	28 2f       	mov	r18, r24
    195c:	ce 01       	movw	r24, r28
    195e:	07 96       	adiw	r24, 0x07	; 7
    1960:	fc 01       	movw	r30, r24
    1962:	e4 0f       	add	r30, r20
    1964:	f5 1f       	adc	r31, r21
    1966:	20 83       	st	Z, r18
					read_data /= 10;
    1968:	8e 81       	ldd	r24, Y+6	; 0x06
    196a:	9a e0       	ldi	r25, 0x0A	; 10
    196c:	69 2f       	mov	r22, r25
    196e:	0e 94 ce 0c 	call	0x199c	; 0x199c <__udivmodqi4>
    1972:	8e 83       	std	Y+6, r24	; 0x06
	while(1)
	{
		if (flag==1)
		{
			read_data = SPDR_NewValue;
			for (u8 i=0 ; i<2 ; i++)
    1974:	89 81       	ldd	r24, Y+1	; 0x01
    1976:	8f 5f       	subi	r24, 0xFF	; 255
    1978:	89 83       	std	Y+1, r24	; 0x01
    197a:	89 81       	ldd	r24, Y+1	; 0x01
    197c:	82 30       	cpi	r24, 0x02	; 2
    197e:	20 f3       	brcs	.-56     	; 0x1948 <main+0x7e>
				{
					data_arr[i]=(read_data%10);
					read_data /= 10;
				}
			LCD_voidDisplay(asci_conv+data_arr[1]);
    1980:	88 85       	ldd	r24, Y+8	; 0x08
    1982:	80 5d       	subi	r24, 0xD0	; 208
    1984:	0e 94 a8 0a 	call	0x1550	; 0x1550 <LCD_voidDisplay>
			LCD_voidDisplay(asci_conv+data_arr[0]);
    1988:	8f 81       	ldd	r24, Y+7	; 0x07
    198a:	80 5d       	subi	r24, 0xD0	; 208
    198c:	0e 94 a8 0a 	call	0x1550	; 0x1550 <LCD_voidDisplay>
			LCD_voidDisplay(' ');
    1990:	80 e2       	ldi	r24, 0x20	; 32
    1992:	0e 94 a8 0a 	call	0x1550	; 0x1550 <LCD_voidDisplay>
			flag=0;
    1996:	10 92 68 00 	sts	0x0068, r1
    199a:	cd cf       	rjmp	.-102    	; 0x1936 <main+0x6c>

0000199c <__udivmodqi4>:
    199c:	99 1b       	sub	r25, r25
    199e:	79 e0       	ldi	r23, 0x09	; 9
    19a0:	04 c0       	rjmp	.+8      	; 0x19aa <__udivmodqi4_ep>

000019a2 <__udivmodqi4_loop>:
    19a2:	99 1f       	adc	r25, r25
    19a4:	96 17       	cp	r25, r22
    19a6:	08 f0       	brcs	.+2      	; 0x19aa <__udivmodqi4_ep>
    19a8:	96 1b       	sub	r25, r22

000019aa <__udivmodqi4_ep>:
    19aa:	88 1f       	adc	r24, r24
    19ac:	7a 95       	dec	r23
    19ae:	c9 f7       	brne	.-14     	; 0x19a2 <__udivmodqi4_loop>
    19b0:	80 95       	com	r24
    19b2:	08 95       	ret

000019b4 <__prologue_saves__>:
    19b4:	2f 92       	push	r2
    19b6:	3f 92       	push	r3
    19b8:	4f 92       	push	r4
    19ba:	5f 92       	push	r5
    19bc:	6f 92       	push	r6
    19be:	7f 92       	push	r7
    19c0:	8f 92       	push	r8
    19c2:	9f 92       	push	r9
    19c4:	af 92       	push	r10
    19c6:	bf 92       	push	r11
    19c8:	cf 92       	push	r12
    19ca:	df 92       	push	r13
    19cc:	ef 92       	push	r14
    19ce:	ff 92       	push	r15
    19d0:	0f 93       	push	r16
    19d2:	1f 93       	push	r17
    19d4:	cf 93       	push	r28
    19d6:	df 93       	push	r29
    19d8:	cd b7       	in	r28, 0x3d	; 61
    19da:	de b7       	in	r29, 0x3e	; 62
    19dc:	ca 1b       	sub	r28, r26
    19de:	db 0b       	sbc	r29, r27
    19e0:	0f b6       	in	r0, 0x3f	; 63
    19e2:	f8 94       	cli
    19e4:	de bf       	out	0x3e, r29	; 62
    19e6:	0f be       	out	0x3f, r0	; 63
    19e8:	cd bf       	out	0x3d, r28	; 61
    19ea:	09 94       	ijmp

000019ec <__epilogue_restores__>:
    19ec:	2a 88       	ldd	r2, Y+18	; 0x12
    19ee:	39 88       	ldd	r3, Y+17	; 0x11
    19f0:	48 88       	ldd	r4, Y+16	; 0x10
    19f2:	5f 84       	ldd	r5, Y+15	; 0x0f
    19f4:	6e 84       	ldd	r6, Y+14	; 0x0e
    19f6:	7d 84       	ldd	r7, Y+13	; 0x0d
    19f8:	8c 84       	ldd	r8, Y+12	; 0x0c
    19fa:	9b 84       	ldd	r9, Y+11	; 0x0b
    19fc:	aa 84       	ldd	r10, Y+10	; 0x0a
    19fe:	b9 84       	ldd	r11, Y+9	; 0x09
    1a00:	c8 84       	ldd	r12, Y+8	; 0x08
    1a02:	df 80       	ldd	r13, Y+7	; 0x07
    1a04:	ee 80       	ldd	r14, Y+6	; 0x06
    1a06:	fd 80       	ldd	r15, Y+5	; 0x05
    1a08:	0c 81       	ldd	r16, Y+4	; 0x04
    1a0a:	1b 81       	ldd	r17, Y+3	; 0x03
    1a0c:	aa 81       	ldd	r26, Y+2	; 0x02
    1a0e:	b9 81       	ldd	r27, Y+1	; 0x01
    1a10:	ce 0f       	add	r28, r30
    1a12:	d1 1d       	adc	r29, r1
    1a14:	0f b6       	in	r0, 0x3f	; 63
    1a16:	f8 94       	cli
    1a18:	de bf       	out	0x3e, r29	; 62
    1a1a:	0f be       	out	0x3f, r0	; 63
    1a1c:	cd bf       	out	0x3d, r28	; 61
    1a1e:	ed 01       	movw	r28, r26
    1a20:	08 95       	ret

00001a22 <_exit>:
    1a22:	f8 94       	cli

00001a24 <__stop_program>:
    1a24:	ff cf       	rjmp	.-2      	; 0x1a24 <__stop_program>
